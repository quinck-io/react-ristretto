openapi: 3.0.3
info:
    description: SportID Server rest api definition
    version: 1.4.4
    title: SportID API
tags:
    - name: Authentication
      description: Authentication operations
    - name: Profile
      description: Profile operations
    - name: Notification
      description: Notification operations
    - name: Search Profiles
      description: Search profiles operations
    - name: Gamification
      description: Gamification operations
    - name: Team
      description: Team operations
    - name: Club Memberships
      description: Club memberships operations
    - name: Feed
      description: Posts feed related operations
    - name: Payments
      description: Payments operations
    - name: Wallet
      description: Wallet operations
    - name: Juniors
      description: Juniors operations
    - name: Backoffice
      description: Backoffice operations
    - name: Challenges
      description: Challenges operations
    - name: Sports
      description: Sports operations

paths:
    /auth/signup:
        post:
            tags:
                - Authentication
            summary: New user signup
            operationId: signup
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Signup"
                required: true
            responses:
                "201":
                    description: User signed up
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /auth/signup/confirmation:
        post:
            tags:
                - Authentication
            summary: Confirm user signup
            operationId: signupConfirmation
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SignupConfirmationRequest"
                required: true
            responses:
                "204":
                    description: User signup confirm reuqested
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /auth/login:
        post:
            tags:
                - Authentication
            summary: Log a specific user into the system
            operationId: login
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewLogin"
                required: true
            responses:
                "200":
                    description: Correctly logged in
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Login"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /auth/login/refresh:
        post:
            parameters:
                - $ref: "#/components/parameters/refreshToken"
            tags:
                - Authentication
            summary: Refresh user login
            operationId: refreshLogin
            security: []
            responses:
                200:
                    description: Login successfully refreshed
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Login"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /auth/forgotPassword:
        post:
            tags:
                - Authentication
            summary: Forgot password operation
            operationId: forgotPassword
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ForgotPassword"
                required: true
            responses:
                204:
                    description: Code sent to the specified email address
                400:
                    $ref: "#/components/responses/BadRequest"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /auth/resetPassword:
        post:
            tags:
                - Authentication
            summary: Reset password operation
            operationId: resetPassword
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ResetPassword"
                required: true
            responses:
                204:
                    description: Password changed
                400:
                    $ref: "#/components/responses/BadRequest"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /auth/credentials:
        patch:
            tags:
                - Authentication
            summary: Update user credentials
            operationId: updateUserCredentials
            parameters:
                - $ref: "#/components/parameters/accessToken"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateUserCredentials"
                required: true
            responses:
                "200":
                    description: Credentials updated
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /auth/credentials/email:
        put:
            tags:
                - Authentication
            summary: Upsert user email
            operationId: upsertUserEmail
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpsertUserEmail"
                required: true
            responses:
                "200":
                    description: Email upserted
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /profile:
        patch:
            tags:
                - Profile
            summary: Update user profile
            operationId: updateUserProfile
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateUserProfile"
                required: true
            responses:
                "200":
                    description: User profile updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PersonalProfile"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Profile
            summary: Get user's profile
            operationId: getUserProfile
            responses:
                "200":
                    description: User Profile retrived
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PersonalProfile"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
        delete:
            tags:
                - Profile
            summary: Delete user's profile
            operationId: deleteUserProfile
            responses:
                "204":
                    description: User Profile deleted
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
    /profile/medicalCertificates:
        post:
            tags:
                - Profile
            summary: Add a new medical certificate to the authenticated user profile
            operationId: addMedicalCertificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewMedicalCertificate"
                required: true
            responses:
                201:
                    description: Medical certificate added to user profile
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MedicalCertificate"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Profile
            summary: Get medical certificates of the authenticated user profile
            operationId: getMedicalCertificates
            responses:
                200:
                    description: User profile medical certificates
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/MedicalCertificate"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/medicalCertificates/{medicalCertificateId}:
        delete:
            tags:
                - Profile
            summary: Delete medical certificate from the authenticated user profile
            operationId: deleteMedicalCertificate
            parameters:
                - name: medicalCertificateId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: User profile medical certificate deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/documents:
        post:
            tags:
                - Profile
            summary: Add a new document to the authenticated user profile
            operationId: addDocument
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewDocument"
                required: true
            responses:
                201:
                    description: Document added to user profile
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Profile
            summary: Get documents of the authenticated user profile
            operationId: getDocuments
            responses:
                200:
                    description: User profile documents
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Document"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/documents/{documentId}:
        delete:
            tags:
                - Profile
            summary: Delete documents from the authenticated user profile
            operationId: deleteDocument
            parameters:
                - name: documentId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: User profile document deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/titles:
        post:
            tags:
                - Profile
            summary: Add a new title to the authenticated user profile
            operationId: addTitle
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewTitle"
                required: true
            responses:
                201:
                    description: title added to user profile
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Title"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Profile
            summary: Get titles of the authenticated user profile
            operationId: getTitles
            responses:
                200:
                    description: User profile titles
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Title"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/titles/{titleId}:
        delete:
            tags:
                - Profile
            summary: Delete titles from the authenticated user profile
            operationId: deleteTitle
            parameters:
                - name: titleId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: User profile title deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/pictures:
        post:
            tags:
                - Profile
            summary: Add a new picture to the authenticated user profile
            operationId: addPicture
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewMedia"
                required: true
            responses:
                201:
                    description: picture added to user profile
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Media"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Profile
            summary: Get pictures of the authenticated user profile
            operationId: getPictures
            responses:
                200:
                    description: User profile pictures
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Media"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/pictures/{pictureId}:
        delete:
            tags:
                - Profile
            summary: Delete picture from the authenticated user profile
            operationId: deletePicture
            parameters:
                - name: pictureId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: User profile picture deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/education:
        post:
            tags:
                - Profile
            summary: Add a education to the authenticated user profile
            operationId: addEducation
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewEducation"
                required: true
            responses:
                201:
                    description: education added to user profile
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Education"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Profile
            summary: Delete education from the authenticated user profile
            operationId: deleteEducation
            responses:
                204:
                    description: User profile education deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /club/memberships/status:
        put:
            tags:
                - Club Memberships
            summary: Accept or decline a club invite, or a request to join
            operationId: updateClubMembershipInvitation
            parameters:
                - name: userOrClubId
                  in: query
                  required: true
                  schema:
                      type: string
                - name: membershipRank
                  in: query
                  required: true
                  schema:
                      $ref: "#/components/schemas/MembershipRank"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateMembershipStatus"
                required: true
            responses:
                204:
                    description: Club member updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/inviteUsers:
        post:
            tags:
                - Club Memberships
            summary: Invite users to the specified club
            operationId: inviteUsersToClub
            parameters:
                - name: clubId
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - userInvitations
                            properties:
                                userInvitations:
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/ClubInvitationToUser"
                required: true
            responses:
                201:
                    description: Users invited to club
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/join:
        post:
            tags:
                - Club Memberships
            summary: Ask to join the specified club
            operationId: joinClub
            parameters:
                - name: clubId
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateUserClubMembership"
                required: true
            responses:
                201:
                    description: User joined club
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /memberships:
        get:
            tags:
                - Club Memberships
            summary: Get the memberships for the authenticated user
            operationId: getMemberships
            parameters:
                - $ref: "#/components/parameters/userIdOrAuthenticatedQuery"
            responses:
                200:
                    description: Memberships
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Memberships"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/memberships/{userId}:
        delete:
            tags:
                - Club Memberships
            summary: Delete a club member
            operationId: deleteClubMember
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: string
                - name: membershipRank
                  in: query
                  required: true
                  schema:
                      $ref: "#/components/schemas/MembershipRank"
            responses:
                204:
                    description: Club member deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/pushNotificationDevices:
        post:
            tags:
                - Notification
            summary: Add a new push notification device to the authenticated user profile
            operationId: addPushNotificationDevice
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewPushNotificationDevice"
                required: true
            responses:
                201:
                    description: device added
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PushNotificationDevice"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Notification
            summary: Get push notification devices of the authenticated user profile
            operationId: getPushNotificationDevices
            responses:
                200:
                    description: User push notification devices
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/PushNotificationDevice"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/pushNotificationDevices/{pushNotificationDeviceId}:
        delete:
            tags:
                - Notification
            summary: Delete push notification device from the authenticated user profile
            operationId: deletePushNotificationDevice
            parameters:
                - name: pushNotificationDeviceId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: Push notification device deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /notifications:
        get:
            tags:
                - Notification
            summary: Get notifications
            operationId: getNotifications
            parameters:
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
            responses:
                200:
                    description: Notifications
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Notification"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /notifications/{notificationId}:
        patch:
            tags:
                - Notification
            summary: Update notification
            operationId: updateNotification
            parameters:
                - name: notificationId
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateNotification"
                required: true
            responses:
                204:
                    description: Notification updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Notification
            summary: Delete notification
            operationId: deleteNotification
            parameters:
                - name: notificationId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: Notification deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profiles:
        get:
            tags:
                - Search Profiles
            summary: Search for user profiles
            operationId: searchUserProfiles
            parameters:
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
                - $ref: "#/components/parameters/localityQuery"
                - $ref: "#/components/parameters/userQuery"
                - $ref: "#/components/parameters/userTypesQuery"
                - $ref: "#/components/parameters/sportTypesQuery"
                - $ref: "#/components/parameters/taughtSportTypesQuery"
                - $ref: "#/components/parameters/clubNatureQuery"
                - $ref: "#/components/parameters/genderQuery"
                - $ref: "#/components/parameters/sportRolesQuery"
                - name: sort
                  in: query
                  description: The sort order of the users.
                  required: false
                  schema:
                      $ref: "#/components/schemas/SearchUserProfilesSortField"
                - $ref: "#/components/parameters/sortAscendingQuery"
            responses:
                200:
                    description: User profiles
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfileSearchResults"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profiles/{userId}:
        get:
            tags:
                - Search Profiles
            summary: Search for user profiles
            operationId: getUserProfileById
            parameters:
                - $ref: "#/components/parameters/userIdPath"
            responses:
                200:
                    description: User profiles
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/teams:
        get:
            tags:
                - Team
            summary: Get the teams of the authenticated user profile
            operationId: getUserTeams
            responses:
                200:
                    description: User teams
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserTeams"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/teams:
        get:
            tags:
                - Team
            summary: Get club teams
            operationId: getClubTeams
            parameters:
                - $ref: "#/components/parameters/clubIdPath"
            responses:
                200:
                    description: Club teams
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ClubTeam"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/teams:
        post:
            tags:
                - Team
            summary: Add a new team to the authenticated club profile
            operationId: createClubTeam
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateClubTeam"
                required: true
            responses:
                201:
                    description: Team added to club
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClubTeam"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/teams/{teamId}:
        get:
            tags:
                - Team
            summary: Get club team
            operationId: getClubTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            responses:
                200:
                    description: Club team
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ClubTeam"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
        patch:
            tags:
                - Team
            summary: Update club team
            operationId: updateClubTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateTeam"
                required: true
            responses:
                204:
                    description: Team updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Team
            summary: Delete club team
            operationId: deleteClubTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            responses:
                204:
                    description: Team deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/teams/{teamId}/pictures:
        post:
            tags:
                - Team
            summary: Add or update a picture for the specified team
            operationId: updateClubTeamPictures
            parameters:
                - $ref: "#/components/parameters/clubIdPath"
                - $ref: "#/components/parameters/teamIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TeamPictures"
                required: true
            responses:
                204:
                    description: Team picture added/updated
                400:
                    $ref: "#/components/responses/BadRequest"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/teams/{teamId}/members:
        post:
            tags:
                - Team
            summary: Add a new member to the specified team
            operationId: addClubTeamMembers
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                userIds:
                                    $ref: "#/components/schemas/CreateTeamMembers"
                            required:
                                - userIds
                required: true
            responses:
                201:
                    description: Team members added
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Team
            summary: Get the members of the specified club team
            operationId: getClubTeamMembers
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            responses:
                200:
                    description: Team members
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/TeamMember"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/teams/{teamId}/members/{userId}:
        delete:
            tags:
                - Team
            summary: Remove team member
            operationId: removeClubTeamMember
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/userIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            responses:
                204:
                    description: Team member deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams:
        post:
            tags:
                - Team
            summary: Create new team
            operationId: createTeam
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateTeam"
                required: true
            responses:
                "201":
                    description: Team created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Team"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Team
            summary: Search for teams
            operationId: getTeams
            parameters:
                - in: query
                  name: name
                  description: The name of the team to search for.
                  schema:
                      type: string
                  required: false
            responses:
                200:
                    description: Teams
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/BasicTeamInfo"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/join:
        post:
            tags:
                - Team
            summary: Ask for joining the specified team as an authenticated user
            operationId: joinTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                204:
                    description: Team invitation sent successfully
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/invitations:
        get:
            tags:
                - Team
            summary: Get pending team invitations for the authenticated profile
            operationId: getUserPendingInvitations
            responses:
                200:
                    description: Team invitations
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - teams
                                properties:
                                    teams:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TeamInfo"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /clubs/{clubId}/teams/{teamId}/leaveTeam:
        delete:
            tags:
                - Team
            summary: Leave the specified team as an authenticated user
            operationId: leaveClubTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/clubIdPath"
            responses:
                204:
                    description: Team left successfully
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/leaveTeam:
        delete:
            tags:
                - Team
            summary: Leave the specified team as an authenticated user
            operationId: leaveTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                204:
                    description: Team left successfully
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/inviteUsers:
        post:
            tags:
                - Team
            summary: Invite users to join the specified team as an authenticated user
            operationId: inviteUsersToTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - usersIds
                            properties:
                                usersIds:
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/UserId"
                required: true
            responses:
                204:
                    description: Team invitation sent successfully
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/vicecaptain:
        post:
            tags:
                - Team
            summary: Add a vice captain to the specified team
            operationId: addViceCaptainToTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - userId
                            properties:
                                userId:
                                    $ref: "#/components/schemas/UserId"
                required: true
            responses:
                204:
                    description: Vice captain added to team
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Team
            summary: Remove vice captain from the specified team
            operationId: removeViceCaptainFromTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                204:
                    description: Vice captain removed from team
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/invitations:
        get:
            tags:
                - Team
            summary: Get pending invitations for the specified team
            operationId: getTeamPendingInvitations
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                200:
                    description: Team invitations
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - users
                                properties:
                                    users:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/TeamMemberInvitation"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/pictures:
        post:
            tags:
                - Team
            summary: Add a new picture to the specified team
            operationId: updateTeamPictures
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TeamPictures"
                required: true
            responses:
                204:
                    description: Team picture added/updated
                400:
                    $ref: "#/components/responses/BadRequest"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/user/{userId}/manageInvitation:
        post:
            tags:
                - Team
            summary: Manage a user request to join a team
            operationId: manageUserJoinRequestToTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/userIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TeamInvitation"
                required: true
            responses:
                204:
                    description: Team invitation updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/manageInvitation:
        post:
            tags:
                - Team
            summary: Manage a team invitation
            operationId: manageTeamInvitationToUser
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TeamInvitation"
                required: true
            responses:
                204:
                    description: Team invitation updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}:
        patch:
            tags:
                - Team
            summary: Update team
            operationId: updateTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateTeam"
                required: true
            responses:
                204:
                    description: Team updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Team
            summary: Get team by id
            operationId: getTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                200:
                    description: Team
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Team"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Team
            summary: Delete team
            operationId: deleteTeam
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                204:
                    description: Team deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/members:
        get:
            tags:
                - Team
            summary: Search for team members
            operationId: getTeamMembers
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
            responses:
                200:
                    description: Team members
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/TeamMember"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /teams/{teamId}/members/{userId}:
        delete:
            tags:
                - Team
            summary: Delete team member
            operationId: deleteTeamMember
            parameters:
                - $ref: "#/components/parameters/teamIdPath"
                - $ref: "#/components/parameters/userIdPath"
            responses:
                204:
                    description: Team member deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /sportSessions:
        post:
            tags:
                - Gamification
            summary: Create new sport session
            operationId: createSportSession
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/NewSportSession"
                required: true
            responses:
                "201":
                    description: Sport session created
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /fitnessSessions:
        post:
            tags:
                - Gamification
            summary: Create new fitness session
            operationId: createFitnessSession
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/NewFitnessSession"
                required: true
            responses:
                "201":
                    description: Fitness session created
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /seasons/current/rewards:
        get:
            tags:
                - Gamification
            summary: Get the current season rewards
            operationId: getCurrentSeasonRewards
            parameters:
                - $ref: "#/components/parameters/userIdOrAuthenticatedQuery"
            responses:
                200:
                    description: Rewards
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SeasonRewards"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /seasons/rewards:
        get:
            tags:
                - Gamification
            summary: Get seasons rewards
            operationId: getSeasonsRewards
            parameters:
                - $ref: "#/components/parameters/userIdOrAuthenticatedQuery"
            responses:
                200:
                    description: Season Rewards
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/SeasonRewards"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /moveGoals/rewards:
        get:
            tags:
                - Gamification
            summary: Get move goals rewards
            operationId: getMoveGoalsRewards
            parameters:
                - $ref: "#/components/parameters/userIdOrAuthenticatedQuery"
                - name: season
                  in: query
                  description: The season for which to get the move goals
                  schema:
                      type: string
                  required: false
                - name: moveGoalId
                  in: query
                  description: The move goal id to get
                  schema:
                      type: string
                  required: false
            responses:
                200:
                    description: Move goals
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/RewardedUserMoveGoal"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/{userId}/followerCounts:
        get:
            tags:
                - Feed
            summary: Get the follower counts of the specified user profile
            operationId: getFollowerCounts
            parameters:
                - $ref: "#/components/parameters/userIdPath"
            responses:
                200:
                    description: Follower counts
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FollowerCounts"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/{userId}/followers:
        get:
            tags:
                - Feed
            summary: Get the followers of the authenticated user profile
            operationId: getFollowers
            parameters:
                - $ref: "#/components/parameters/userIdPath"
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
            responses:
                200:
                    description: Followers
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Followers"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/{userId}/following:
        get:
            tags:
                - Feed
            summary: Get the users followed by the authenticated user profile
            operationId: getFollowings
            parameters:
                - $ref: "#/components/parameters/userIdPath"
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
            responses:
                200:
                    description: Followings
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Followings"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/{userId}/follow:
        post:
            tags:
                - Feed
            summary: Follow the user with the specified id
            operationId: followUser
            parameters:
                - $ref: "#/components/parameters/userIdPath"
            responses:
                204:
                    description: The user has been followed
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Feed
            summary: Unfollow the user with the specified id
            operationId: unfollowUser
            parameters:
                - $ref: "#/components/parameters/userIdPath"
            responses:
                204:
                    description: The user has been unfollowed
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /followers/requests:
        get:
            tags:
                - Feed
            summary: Get the follow requests of the authenticated user profile
            operationId: getFollowRequests
            responses:
                200:
                    description: Follow requests
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/BasicUserData"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /followers/{followerId}/request:
        patch:
            tags:
                - Feed
            summary: Accept or reject the follow request of the user with the specified id
            operationId: updateFollowRequest
            parameters:
                - $ref: "#/components/parameters/followerIdPath"
            requestBody:
                description: The follow request to accept or reject
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateFollowRequest"
            responses:
                204:
                    description: The follow request has been updated
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /feed:
        get:
            tags:
                - Feed
            summary: Get the posts feed
            description: Get the paginated feed of posts for the current user
            operationId: getFeed
            parameters:
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
            responses:
                200:
                    description: Posts
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPosts"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - Feed
            summary: Create a new post
            description: Create a new post
            operationId: createPost
            requestBody:
                description: The post to create
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewPost"
            responses:
                201:
                    description: The post has been created
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /feed/{postId}:
        get:
            tags:
                - Feed
            summary: Get the post with the post id
            description: Get the post with the specified id
            operationId: getPost
            parameters:
                - $ref: "#/components/parameters/postId"
            responses:
                200:
                    description: Post
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PostInUserFeed"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Feed
            summary: Delete the post with the specified id
            description: Delete the post with the specified id
            operationId: deletePost
            parameters:
                - $ref: "#/components/parameters/postId"
            responses:
                204:
                    description: The post has been deleted
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /feed/{postId}/sharing:
        post:
            tags:
                - Feed
            summary: Share the post with the specified id
            description: Share the post with the specified id
            operationId: sharePost
            parameters:
                - $ref: "#/components/parameters/postId"
            requestBody:
                description: The post to share
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PostSharing"
            responses:
                204:
                    description: The post has been shared
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /feed/{postId}/like:
        post:
            tags:
                - Feed
            summary: Like the post with the specified id
            description: Like the post with the specified id
            operationId: likePost
            parameters:
                - $ref: "#/components/parameters/postId"
            responses:
                201:
                    description: The like has been added to the post
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Feed
            summary: Remove the like from the post with the specified id
            description: Remove the like from the post with the specified id
            operationId: dislikePost
            parameters:
                - $ref: "#/components/parameters/postId"
            responses:
                204:
                    description: The like has been removed from the post
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/{userId}/posts:
        get:
            tags:
                - Feed
            summary: Get the posts of the user with the specified id
            description: Get the posts of the user with the specified id
            operationId: getUserPosts
            parameters:
                - $ref: "#/components/parameters/userIdPath"
            responses:
                200:
                    description: Posts
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/PostInUserFeed"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /payments/methods:
        post:
            tags:
                - Payments
            summary: Add a new payment method to the current user
            description: Add a new payment method to the current user
            operationId: addPaymentMethod
            requestBody:
                description: The payment method to add
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewPaymentMethod"
            responses:
                201:
                    description: The payment method has been added
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaymentMethod"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Payments
            summary: Get the current user payment methods
            description: Get the current user payment methods
            operationId: getCurrentUserPaymentMethods
            parameters:
                - name: type
                  in: query
                  description: The type of payment method to filter by
                  required: false
                  schema:
                      $ref: "#/components/schemas/PaymentMethodType"
            responses:
                200:
                    description: User payment methods
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/PaymentMethod"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /payments/methods/{paymentMethodId}:
        delete:
            tags:
                - Payments
            summary: Remove the payment method with the specified id
            description: Remove the payment method with the specified id
            operationId: deletePaymentMethod
            parameters:
                - name: paymentMethodId
                  in: path
                  description: The id of the payment method to remove
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: The payment method has been removed
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /payments/account:
        get:
            tags:
                - Payments
            summary: Get the current user payments account
            description: Get the current user payments account
            operationId: getPaymentsAccount
            responses:
                200:
                    description: User Stripe account
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaymentsAccount"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /payments/intents/{paymentIntentId}:
        get:
            tags:
                - Payments
            summary: Get the Stripe payment intent with the specified id
            description: Get the Stripe payment intent with the specified id
            operationId: getPaymentIntent
            parameters:
                - $ref: "#/components/parameters/paymentIntentId"
            responses:
                200:
                    description: Payment intent
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StripePaymentIntent"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /payments/webhooks:
        post:
            tags:
                - Payments
            summary: Payments webhook
            description: Payments webhook
            operationId: paymentsWebhook
            requestBody:
                description: The payments webhook event
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: true
            responses:
                204:
                    description: The webhook event has been processed
                400:
                    $ref: "#/components/responses/BadRequest"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /payments/transactions:
        get:
            tags:
                - Payments
            summary: Get the current user payments transactions
            description: Get the current user payments transactions
            operationId: getCurrentUserPaymentsTransactions
            parameters:
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
                - name: status
                  in: query
                  description: The status of the transactions to filter by
                  required: false
                  schema:
                      $ref: "#/components/schemas/TransactionStatus"
            responses:
                200:
                    description: User payments transactions
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedTransactions"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /wallet/plans:
        get:
            tags:
                - Wallet
            summary: Get the current user account plan
            description: Get the current user account plan
            operationId: getAccountPlans
            responses:
                200:
                    description: User account plan
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/AccountPlan"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /wallet/plans/active:
        patch:
            tags:
                - Wallet
            summary: Activate the specified account plan
            description: Activate the specified account plan
            operationId: updateActiveAccountPlan
            requestBody:
                description: The account plan to activate
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateActiveAccountPlan"
            responses:
                204:
                    description: The account plan has been activated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /wallet/fitcoins/summary:
        get:
            tags:
                - Wallet
            summary: Get the current user fitcoins summary
            description: Get the current user fitcoins summary
            operationId: getFitCoinsSummary
            responses:
                200:
                    description: User fitcoins summary
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FitCoinsSummary"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /wallet/fitcoins/settings:
        get:
            tags:
                - Wallet
            summary: Get the current user fitcoins settings
            description: Get the current user fitcoins settings
            operationId: getFitCoinsSettings
            responses:
                200:
                    description: User fitcoins settings
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FitCoinsSettings"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        patch:
            tags:
                - Wallet
            summary: Update the current user fitcoins settings
            description: Update the current user fitcoins settings
            operationId: updateFitCoinsSettings
            requestBody:
                description: The fitcoins settings to update
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateFitCoinsSettings"
            responses:
                200:
                    description: User fitcoins settings updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FitCoinsSettings"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /juniors/products:
        get:
            tags:
                - Juniors
            summary: Get the products for the current user
            description: Get the products for the current user
            operationId: getJuniorsProducts
            responses:
                200:
                    description: User products
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/JuniorProduct"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /juniors:
        post:
            tags:
                - Juniors
            summary: Create new junior
            operationId: createJunior
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateJunior"
                required: true
            responses:
                "201":
                    description: Junior created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/JuniorOverview"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "409":
                    $ref: "#/components/responses/Conflict"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Juniors
            summary: Get juniors
            operationId: getJuniors
            responses:
                200:
                    description: Juniors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/JuniorOverview"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /juniors/{juniorId}:
        delete:
            tags:
                - Juniors
            summary: Delete junior
            operationId: deleteJunior
            parameters:
                - $ref: "#/components/parameters/juniorIdPath"
            responses:
                204:
                    description: Junior deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /juniors/{juniorId}/plan:
        put:
            tags:
                - Juniors
            summary: Update junior plan
            description: Update junior plan
            operationId: updateJuniorPlan
            parameters:
                - $ref: "#/components/parameters/juniorIdPath"
            requestBody:
                description: The junior plan to update
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateJuniorPlan"
            responses:
                200:
                    description: Junior plan updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/JuniorOverview"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /juniors/{juniorId}/subscription:
        delete:
            tags:
                - Juniors
            summary: Delete the subscription of the junior with the specified id
            description: Delete the subscription of the junior with the specified id
            operationId: deleteJuniorSubscription
            parameters:
                - $ref: "#/components/parameters/juniorIdPath"
            responses:
                204:
                    description: The subscription has been deleted
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /backoffice/documents/{documentId}/verifications/approval:
        get:
            tags:
                - Backoffice
            summary: Get the approval of the document with the specified id
            description: Get the approval of the document with the specified id
            operationId: getDocumentApproval
            parameters:
                - $ref: "#/components/parameters/documentIdPath"
                - $ref: "#/components/parameters/verificationCodeQueryRequired"
                - $ref: "#/components/parameters/userIdQueryRequired"
                - $ref: "#/components/parameters/documentTypeQueryRequired"
            responses:
                200:
                    description: Document approval
                    content:
                        text/html:
                            schema:
                                type: string
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /backoffice/documents/{documentId}/verifications/rejection:
        get:
            tags:
                - Backoffice
            summary: Get the rejection of the document with the specified id
            description: Get the rejection of the document with the specified id
            operationId: getDocumentRejection
            parameters:
                - $ref: "#/components/parameters/documentIdPath"
                - $ref: "#/components/parameters/verificationCodeQueryRequired"
                - $ref: "#/components/parameters/userIdQueryRequired"
                - $ref: "#/components/parameters/documentTypeQueryRequired"
            responses:
                200:
                    description: Document rejection
                    content:
                        text/html:
                            schema:
                                type: string
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /backoffice/profiles/{userId}/deletion:
        get:
            tags:
                - Backoffice
            summary: Get the deletion of the user profile with the specified id
            description: Get the deletion of the user profile with the specified id
            operationId: getUserProfileDeletion
            parameters:
                - $ref: "#/components/parameters/userIdPath"
                - $ref: "#/components/parameters/verificationCodeQueryRequired"
            responses:
                200:
                    description: User profile deletion
                    content:
                        text/html:
                            schema:
                                type: string
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /backoffice/email/verification:
        get:
            tags:
                - Backoffice
            summary: Get the email verification
            description: Get the email verification
            operationId: getEmailVerification
            parameters:
                - $ref: "#/components/parameters/verificationTokenQueryRequired"
                - $ref: "#/components/parameters/userIdQueryRequired"
            responses:
                200:
                    description: Email verification
                    content:
                        text/html:
                            schema:
                                type: string
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /challenges:
        get:
            tags:
                - Challenges
            summary: Get the challenges for the authenticated user
            description: Get challenges
            operationId: getChallenges
            responses:
                200:
                    description: Challenges
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Challenge"
                500:
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - Challenges
            summary: Create a new challenge
            description: Create a new challenge
            operationId: createChallenge
            requestBody:
                description: The challenge to create
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewChallenge"
            responses:
                201:
                    description: The challenge has been created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Challenge"
                400:
                    $ref: "#/components/responses/BadRequest"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /challenges/{challengeId}:
        get:
            tags:
                - Challenges
            summary: Get the challenge with the specified id
            description: Get the challenge with the specified id
            operationId: getChallenge
            parameters:
                - $ref: "#/components/parameters/challengeIdPath"
            responses:
                200:
                    description: Challenge
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Challenge"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
        patch:
            tags:
                - Challenges
            summary: Update the challenge with the specified id
            description: Update the challenge with the specified id
            operationId: updateChallenge
            parameters:
                - $ref: "#/components/parameters/challengeIdPath"
            requestBody:
                description: The challenge to update
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateChallenge"
            responses:
                204:
                    description: The challenge has been updated
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/taughtSports:
        post:
            tags:
                - Profile
            summary: Add a new taught sport to the current user
            description: Add a new taught sport to the current user
            operationId: addTaughtSport
            requestBody:
                description: The taught sport to add
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewTaughtSport"
            responses:
                201:
                    description: The taught sport has been added
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaughtSport"
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Profile
            summary: Get the current user taught sports
            description: Get the current user taught sports
            operationId: getTaughtSports
            responses:
                200:
                    description: User taught sports
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/TaughtSport"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profile/taughtSports/{sportType}:
        delete:
            tags:
                - Profile
            summary: Delete the taught sport with the specified sport type
            description: Delete the taught sport with the specified sport type
            operationId: deleteTaughtSport
            parameters:
                - $ref: "#/components/parameters/sportTypePath"
            responses:
                204:
                    description: The taught sport has been deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /sports/certifications/authorizations:
        post:
            tags:
                - Sports
            summary: Create new sport certification authorization
            operationId: createSportCertificationAuthorization
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SportCertificationAuthorizationRequest"
                required: true
            responses:
                "201":
                    description: Sport certification authorization created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SportCertificationAuthorization"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Sports
            summary: Get sports certifications authorizations
            operationId: getSportsCertificationAuthorizations
            parameters:
                - name: status
                  in: query
                  description: The status of the authorizations to search for.
                  required: false
                  schema:
                      $ref: "#/components/schemas/SportCertificationAuthorizationStatus"
            responses:
                "200":
                    description: Sports certifications authorizations
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/SportCertificationAuthorization"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /sports/certifications/authorizations/status:
        patch:
            tags:
                - Sports
            summary: Update sport certification authorization status
            operationId: updateSportsCertificationAuthorizationStatus
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateSportCertificationAuthorizationStatus"
                required: true
            responses:
                "204":
                    description: Sport certification authorization status updated
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthenticated"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /sports/skills/certifications:
        post:
            tags:
                - Sports
            summary: Certify sport skill to the specified user
            operationId: addSkillCertification
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SkillsToCertify"
                required: true
            responses:
                201:
                    description: Sport skill added
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserSkillsBySport"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /sports/{sportType}/skills:
        get:
            tags:
                - Sports
            summary: Get sport skills
            operationId: getSportSkills
            parameters:
                - $ref: "#/components/parameters/sportTypePath"
            responses:
                200:
                    description: Sport skills
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SportSkills"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /sports/skills:
        get:
            tags:
                - Sports
            summary: Get user sport skills
            operationId: getSkillsCertifications
            parameters:
                - $ref: "#/components/parameters/userIdOrAuthenticatedQuery"
                - $ref: "#/components/parameters/sportTypeQuery"
            responses:
                200:
                    description: User sport skills
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserSkillsBySport"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /sports/levels/certifications:
        post:
            tags:
                - Sports
            summary: Certify sport level to the specified user
            operationId: addLevelCertification
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LevelsToCertify"
                required: true
            responses:
                201:
                    description: Sport level added
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserLevelsBySport"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /sports/levels:
        get:
            tags:
                - Sports
            summary: Get user sport levels
            operationId: getLevelsCertifications
            parameters:
                - $ref: "#/components/parameters/userIdOrAuthenticatedQuery"
                - $ref: "#/components/parameters/sportTypeQuery"
            responses:
                200:
                    description: User sport levels
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserLevelsBySport"
    /sports/{sportType}/levels:
        get:
            tags:
                - Sports
            summary: Get sport levels
            operationId: getSportLevels
            parameters:
                - $ref: "#/components/parameters/sportTypePath"
            responses:
                200:
                    description: Sport levels
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SportLevels"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profiles/{userId}/sports/{sportType}/role:
        put:
            tags:
                - Sports
            summary: Assign a new role for the user in the specified sport
            operationId: assignUserSportRole
            parameters:
                - $ref: "#/components/parameters/userIdPath"
                - $ref: "#/components/parameters/sportTypePath"
            requestBody:
                description: The role to add
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AssignSportRole"
            responses:
                204:
                    description: The role has been added
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/providers:
        get:
            tags:
                - Marketplace
            summary: Get the service providers
            operationId: getMarketplaceServiceProviders
            parameters:
                - $ref: "#/components/parameters/userQuery"
                - $ref: "#/components/parameters/sportTypesQuery"
                - $ref: "#/components/parameters/localityQuery"
                - $ref: "#/components/parameters/genderQuery"
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limit"
                - name: sort
                  in: query
                  description: The sort order of the service providers.
                  required: false
                  schema:
                      type: string
                      enum:
                          - lowestServicePrice
                - $ref: "#/components/parameters/sortAscendingQuery"
            responses:
                200:
                    description: Service providers
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedMarketplaceServiceProviders"
                400:
                    $ref: "#/components/responses/BadRequest"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services:
        get:
            tags:
                - Marketplace
            summary: Get the services
            operationId: getUserMarketplaceServices
            parameters:
                - $ref: "#/components/parameters/userIdQueryRequired"
            responses:
                200:
                    description: Services
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/MarketplaceService"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - Marketplace
            summary: Create a new service
            operationId: createMarketplaceService
            requestBody:
                description: The service to create
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewMarketplaceService"
            responses:
                201:
                    description: The service has been created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MarketplaceService"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/{serviceId}:
        get:
            tags:
                - Marketplace
            summary: Get the service with the specified id
            operationId: getMarketplaceService
            parameters:
                - $ref: "#/components/parameters/marketplaceServiceIdPath"
            responses:
                200:
                    description: Service
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MarketplaceService"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
        patch:
            tags:
                - Marketplace
            summary: Update the service with the specified id
            operationId: updateMarketplaceService
            parameters:
                - $ref: "#/components/parameters/marketplaceServiceIdPath"
            requestBody:
                description: The service to update
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateMarketplaceService"
            responses:
                204:
                    description: The service has been updated
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Marketplace
            summary: Delete the service with the specified id
            operationId: deleteMarketplaceService
            parameters:
                - $ref: "#/components/parameters/marketplaceServiceIdPath"
            responses:
                204:
                    description: The service has been deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings:
        post:
            tags:
                - Marketplace
            summary: Create a new booking for the specified service
            operationId: createMarketplaceServiceBooking
            requestBody:
                description: The booking to create
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewMarketplaceServiceBooking"
            responses:
                201:
                    description: The booking has been created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MarketplaceServiceBooking"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
        get:
            tags:
                - Marketplace
            summary: Get the bookings for the authenticated user
            operationId: getUserMarketplaceServiceBookings
            parameters:
                - name: status
                  in: query
                  description: The status of the bookings to search for.
                  required: false
                  schema:
                      type: array
                      items:
                          $ref: "#/components/schemas/MarketplaceServiceBookingStatus"
                - name: serviceProvider
                  in: query
                  description: The id of the service provider to search for.
                  required: false
                  schema:
                      type: string
                - name: participationConfirmed
                  in: query
                  description: The participation confirmation status of the bookings to search for.
                  required: false
                  schema:
                      type: boolean
            responses:
                200:
                    description: Bookings
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/MarketplaceServiceBooking"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings/{bookingId}:
        get:
            tags:
                - Marketplace
            summary: Get the booking with the specified id
            operationId: getMarketplaceServiceBooking
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            responses:
                200:
                    description: Booking
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MarketplaceServiceBooking"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Marketplace
            summary: Delete the booking with the specified id
            operationId: deleteMarketplaceServiceBooking
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            responses:
                204:
                    description: The booking has been deleted
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings/{bookingId}/details:
        put:
            tags:
                - Marketplace
            summary: Propose a new date for the booking with the specified id
            operationId: setMarketplaceServiceBookingDetails
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            requestBody:
                description: The new detail
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MarketplaceServiceBookingDetails"
            responses:
                204:
                    description: The details has been set
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings/{bookingId}/payment:
        post:
            tags:
                - Marketplace
            summary: Create the payment for the specified booking
            description: Create the payment for the specified booking
            operationId: createMarketplaceServiceBookingPayment
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            requestBody:
                description: The payment method to use
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewBookingPayment"
            responses:
                201:
                    description: The booking payment has been created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BookingPayment"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings/{bookingId}/reviews:
        post:
            tags:
                - Marketplace
            summary: Create the review for the specified booking
            description: Create the review for the specified booking
            operationId: createMarketplaceServiceBookingReview
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            requestBody:
                description: The review to create
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewReview"
            responses:
                201:
                    description: The booking review has been created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Review"
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                404:
                    $ref: "#/components/responses/NotFound"
                409:
                    $ref: "#/components/responses/Conflict"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings/{bookingId}/participants:
        post:
            tags:
                - Marketplace
            summary: Add a new participation to the specified booking
            operationId: addMarketplaceServiceBookingParticipation
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            requestBody:
                description: The participation to add
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NewParticipation"
            responses:
                201:
                    description: The participation has been added
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /marketplace/services/bookings/{bookingId}/participation:
        patch:
            tags:
                - Marketplace
            summary: Update participation to the specified booking
            operationId: updateMarketplaceServiceBookingParticipation
            parameters:
                - $ref: "#/components/parameters/bookingIdPath"
            requestBody:
                description: The participation to confirm
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateParticipation"
            responses:
                204:
                    description: The participation has been updated
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    $ref: "#/components/responses/Unauthenticated"
                403:
                    $ref: "#/components/responses/Forbidden"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"
    /profiles/{userId}/reviews/summary:
        get:
            tags:
                - Profiles
            summary: Get the reviews summary for the user with the specified id
            operationId: getUserReviewsSummary
            parameters:
                - $ref: "#/components/parameters/userIdPath"
            responses:
                200:
                    description: User reviews summary
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserReviewsSummary"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    $ref: "#/components/responses/NotFound"
                500:
                    $ref: "#/components/responses/InternalServerError"

security:
    - userAuth: []

components:
    securitySchemes:
        userAuth:
            type: apiKey
            in: header
            name: authorization
    responses:
        NotFound:
            description: The specified resource was not found
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorData"
        Unauthenticated:
            description: You are not authenticated
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorData"
        Forbidden:
            description: You are authenticated but not authorized
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorData"
        BadRequest:
            description: The provided data are not acceptable
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorData"
        Conflict:
            description: The provided data are in conflict with stored data
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorData"
        InternalServerError:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorData"
    parameters:
        refreshToken:
            name: refresh-token
            in: header
            description: The refresh token
            required: true
            schema:
                type: string
        accessToken:
            name: access-token
            in: header
            description: The access token
            required: true
            schema:
                type: string
        offset:
            name: offset
            in: query
            schema:
                type: integer
                minimum: 0
                default: 0
            required: false
            description: The number of items to be skipped.
        limit:
            name: limit
            in: query
            schema:
                type: integer
                minimum: 1
                default: 10
            required: false
            description: |
                The number of items to return.

                If not specified all the resulting 
                items will be returned.
        sportTypeQuery:
            name: sportType
            in: query
            schema:
                $ref: "#/components/schemas/SportType"
            required: false
            description: The sport to search for.
        sportTypesQuery:
            name: sportTypes
            in: query
            schema:
                type: array
                items:
                    $ref: "#/components/schemas/SportType"
            required: false
            description: The sport to search for.
        taughtSportTypesQuery:
            name: taughtSportTypes
            in: query
            schema:
                type: array
                items:
                    $ref: "#/components/schemas/SportType"
            required: false
            description: The sport to search for.
        clubNatureQuery:
            name: clubNature
            in: query
            schema:
                $ref: "#/components/schemas/ClubNature"
            required: false
            description: The club nature to search for.
        sportTypePath:
            name: sportType
            in: path
            schema:
                $ref: "#/components/schemas/SportType"
            required: true
            description: The sport type.
        userIdOrAuthenticatedQuery:
            name: userId
            in: query
            description: |
                The id of the user.

                If not specified, the authenticated user is used.
            schema:
                $ref: "#/components/schemas/UserId"
            required: false
        localityQuery:
            name: locality
            in: query
            schema:
                type: string
            required: false
            description: The locality to search for.
        userQuery:
            name: user
            in: query
            schema:
                type: string
            required: false
            description: The user to search for. Filters for both name and username.
        userTypesQuery:
            name: userTypes
            in: query
            schema:
                type: array
                items:
                    $ref: "#/components/schemas/UserType"
            required: false
            description: The user type to search for.
        postId:
            name: postId
            in: path
            description: The post id
            required: true
            schema:
                type: string
                format: uuid
        userIdPath:
            name: userId
            in: path
            schema:
                $ref: "#/components/schemas/UserId"
            required: true
            description: The user id.
        teamIdPath:
            name: teamId
            in: path
            schema:
                type: string
            required: true
            description: The team id.
        challengeIdPath:
            name: challengeId
            in: path
            schema:
                type: string
            required: true
            description: The challenge id.
        clubIdPath:
            name: clubId
            in: path
            schema:
                type: string
            required: true
            description: The club id.
        paymentIntentId:
            name: paymentIntentId
            in: path
            description: Stripe payment intent id
            required: true
            schema:
                type: string
        bookingIdPath:
            name: bookingId
            in: path
            description: The booking id
            required: true
            schema:
                type: string
                format: uuid
        juniorIdPath:
            name: juniorId
            in: path
            description: The junior id
            required: true
            schema:
                type: string
        documentIdPath:
            name: documentId
            in: path
            description: The document id
            required: true
            schema:
                type: string
        verificationCodeQueryRequired:
            name: code
            in: query
            description: The code of the verification
            schema:
                type: string
            required: true
        verificationTokenQueryRequired:
            name: token
            in: query
            description: The token of the verification
            schema:
                type: string
            required: true
        userIdQueryRequired:
            name: userId
            in: query
            schema:
                $ref: "#/components/schemas/UserId"
            required: true
            description: The user id.
        documentTypeQueryRequired:
            name: documentType
            in: query
            schema:
                $ref: "#/components/schemas/DocumentType"
            required: true
            description: The document type.
        followerIdPath:
            name: followerId
            in: path
            description: The follower id
            required: true
            schema:
                type: string
        marketplaceServiceIdPath:
            name: serviceId
            in: path
            description: The service id
            required: true
            schema:
                type: string
        genderQuery:
            name: gender
            in: query
            schema:
                $ref: "#/components/schemas/Gender"
            required: false
            description: The gender of the user.
        sortAscendingQuery:
            name: sortAscending
            in: query
            schema:
                type: boolean
            required: false
            description: The sort direction.
        sportRolesQuery:
            name: sportRoles
            in: query
            schema:
                type: array
                items:
                    $ref: "#/components/schemas/SportRole"
            required: false
            description: The sport to search for.
    schemas:
        # Application Types
        ClubNature:
            type: string
            enum:
                - ASD
                - SSD
                - SCHOOL
                - GYM
                - RENTAL_SHOP
                - CLUB
        SportPromotionBody:
            type: string
            enum:
                - ACSI
                - AICS
                - ASC
                - ASI
                - CNS_LIBERTAS
                - CSAIN
                - CSEN
                - CSI
                - ENDAS
                - MSP
                - OPES
                - PGS
                - UISP
                - US_ACLI
                - FIDAL
                - FCI
                - FITP
                - FISI
                - FIN
                - FIG
                - FIGC
                - FIPAV
                - FIP
                - FISG
                - FIR
        UserType:
            type: string
            enum:
                - IDS_PLAY
                - IDS_GURU
                - CLUB
                - JUNIOR
        TeamInvitationStatus:
            type: string
            enum:
                - ACCEPTED
                - DECLINED
        Gender:
            type: string
            enum:
                - MALE
                - FEMALE
        Email:
            type: string
            format: email
        PhoneNumber:
            type: string
        UserId:
            type: string
            format: uuid
        ClubId:
            type: string
            format: uuid
        Locale:
            type: string
            enum:
                - it-IT
        SpokenLocale:
            type: string
        PrimaryHand:
            type: string
            enum:
                - RIGHT
                - LEFT
                - AMBIDEXTROUS
        PrimaryFoot:
            type: string
            enum:
                - RIGHT
                - LEFT
                - AMBIDEXTROUS
        FoodIntollerance:
            type: string
            enum:
                - GLUTEN
                - LACTOSE
                - NUTS
                - SHELLFISH
                - EGGS
                - FISH
                - SOY
                - CELERY
                - MUSTARD
                - SESAME
                - SULPHITES
                - LUPIN
                - MOLLUSCS
        BloodType:
            type: string
            enum:
                - A_POSITIVE
                - A_NEGATIVE
                - B_POSITIVE
                - B_NEGATIVE
                - AB_POSITIVE
                - AB_NEGATIVE
                - O_POSITIVE
                - O_NEGATIVE
        Trauma:
            type: string
            enum:
                - HEAD
                - NECK
                - CHEST
                - ABDOMEN
                - PELVIS
                - UPPER_BACK
                - LOWER_BACK
                - LEFT_LEG
                - RIGHT_LEG
                - LEFT_FOOT
                - RIGHT_FOOT
                - LEFT_ANKLE
                - RIGHT_ANKLE
                - LEFT_WRIST
                - RIGHT_WRIST
                - LEFT_HAND
                - RIGHT_HAND
                - LEFT_ELBOW
                - RIGHT_ELBOW
                - LEFT_KNEE
                - RIGHT_KNEE
                - LEFT_ARM
                - RIGHT_ARM
                - LEFT_GROIN
                - RIGHT_GROIN
                - OTHER
        MedicalOperation:
            type: string
            enum:
                - HEAD
                - NECK
                - CHEST
                - ABDOMEN
                - PELVIS
                - UPPER_BACK
                - LOWER_BACK
                - SKIN
                - LEFT_LEG
                - RIGHT_LEG
                - LEFT_FOOT
                - RIGHT_FOOT
                - LEFT_ANKLE
                - RIGHT_ANKLE
                - LEFT_WRIST
                - RIGHT_WRIST
                - LEFT_HAND
                - RIGHT_HAND
                - OTHER
        Medicine:
            type: string
        HereditaryDisease:
            type: string
        FoodAllergy:
            type: string
            enum: # TODO: Add all the food allergies
                - GLUTEN
                - LACTOSE
                - NUTS
                - SHELLFISH
                - EGGS
                - FISH
                - SOY
                - CELERY
                - MUSTARD
                - SESAME
                - SULPHITES
                - LUPIN
                - MOLLUSCS
        NewIDSPlayState:
            type: object
            required:
                - weight
                - height
                - footNumber
            properties:
                weight:
                    $ref: "#/components/schemas/PositiveNumberGreaterThanZero"
                height:
                    $ref: "#/components/schemas/PositiveNumberGreaterThanZero"
                footNumber:
                    $ref: "#/components/schemas/PositiveNumber"
        BodyMassIndexClass:
            type: string
            enum:
                - SEVERE_THINNESS
                - UNDERWEIGHT
                - NORMAL_WEIGHT
                - OVERWEIGHT
                - OBESE_CLASS_1
                - OBESE_CLASS_2
                - OBESE_CLASS_3
        IDSPlayState:
            type: object
            required:
                - weight
                - height
                - bodyMassIndex
                - bodyMassIndexClass
                - footNumber
                - updatedAt
            properties:
                weight:
                    $ref: "#/components/schemas/PositiveNumberGreaterThanZero"
                height:
                    $ref: "#/components/schemas/PositiveNumberGreaterThanZero"
                bodyMassIndex:
                    $ref: "#/components/schemas/PositiveNumber"
                bodyMassIndexClass:
                    $ref: "#/components/schemas/BodyMassIndexClass"
                footNumber:
                    $ref: "#/components/schemas/PositiveNumber"
                updatedAt:
                    type: string
                    format: date-time
        Profession:
            type: string
        Address:
            type: object
            required:
                - streetAddress
                - locality
                - country
            properties:
                streetAddress:
                    type: string
                locality:
                    type: string
                postalCode:
                    type: string
                country:
                    type: string
                province:
                    type: string
        SportType:
            type: string
            enum:
                - RUNNING
                - BIKING
                - TENNIS
                - PADEL
                - SKIING
                - CROSS_COUNTRY_SKIING
                - SNOWBOARD
                - SWIMMING
                - GOLF
                - FOOTBALL
                - FIVE_A_SIDE_FOOTBALL
                - VOLLEYBALL
                - BASKETBALL
                - ICE_HOCKEY
                - RUGBY
        ClubSport:
            type: object
            required:
                - sportType
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                sportPromotionBody:
                    $ref: "#/components/schemas/SportPromotionBody"
        Certification:
            type: object
            required:
                - idsGuruCertifierId
            properties:
                idsGuruCertifierId:
                    $ref: "#/components/schemas/UserId"
        Contacts:
            type: object
            required:
                - email
                - phoneNumber
            properties:
                email:
                    $ref: "#/components/schemas/Email"
                phoneNumber:
                    $ref: "#/components/schemas/PhoneNumber"
        Birthdate:
            type: string
            format: date
        # Clubs memeberships
        ClubDirectorRole:
            type: string
            enum:
                - PRESIDENT
                - VICE_PRESIDENT
                - DIRECTOR
                - SECRETARY
                - TREASURER
                - COUNCILLOR
        ClubDirector:
            type: object
            required:
                - role
            properties:
                role:
                    $ref: "#/components/schemas/ClubDirectorRole"
        MembershipRank:
            type: string
            enum:
                - MEMBER
                - COACH
                - DIRECTOR
        MembershipStatus:
            type: string
            enum:
                - PENDING
                - CONFIRMED
                - DECLINED
        MembershipInvitationType:
            type: string
            enum:
                - CLUB_TO_USER
                - USER_TO_CLUB
        UserClubsMemberships:
            type: array
            items:
                $ref: "#/components/schemas/ClubId"
        UserClubsCoaching:
            type: array
            items:
                $ref: "#/components/schemas/ClubId"
        ClubMembers:
            type: array
            items:
                $ref: "#/components/schemas/UserId"
        ClubCoaches:
            type: array
            items:
                $ref: "#/components/schemas/UserId"
        Memberships:
            type: array
            items:
                $ref: "#/components/schemas/Membership"
        Membership:
            type: object
            required:
                - userId
                - name
                - membershipRank
                - status
                - invitationType
            properties:
                name:
                    type: string
                userId:
                    $ref: "#/components/schemas/UserId"
                membershipRank:
                    $ref: "#/components/schemas/MembershipRank"
                status:
                    $ref: "#/components/schemas/MembershipStatus"
                invitationType:
                    $ref: "#/components/schemas/MembershipInvitationType"
                picture:
                    $ref: "#/components/schemas/Picture"
                sport:
                    $ref: "#/components/schemas/SportType"
                director:
                    $ref: "#/components/schemas/ClubDirector"
        ClubInvitationToUser:
            type: object
            required:
                - userId
                - membershipRank
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                membershipRank:
                    $ref: "#/components/schemas/MembershipRank"
                sport:
                    $ref: "#/components/schemas/SportType"
                director:
                    $ref: "#/components/schemas/ClubDirector"
        CreateUserClubMembership:
            type: object
            required:
                - membershipRank
            properties:
                sport:
                    $ref: "#/components/schemas/SportType"
                membershipRank:
                    $ref: "#/components/schemas/MembershipRank"
                director:
                    $ref: "#/components/schemas/ClubDirector"
        UpdateMembershipStatus:
            type: object
            required:
                - status
            properties:
                status:
                    $ref: "#/components/schemas/MembershipStatus"
        # Media Data Types
        NewPicture:
            allOf:
                - $ref: "#/components/schemas/NewMedia"
        Picture:
            allOf:
                - $ref: "#/components/schemas/Media"
        NewMedia:
            type: object
            required:
                - content
                - name
            properties:
                content:
                    $ref: "#/components/schemas/MediaContent"
                name:
                    type: string
        Media:
            type: object
            required:
                - id
                - name
                - uri
            properties:
                id:
                    type: string
                name:
                    type: string
                uri:
                    $ref: "#/components/schemas/MediaUri"
        NewDocument:
            allOf:
                - $ref: "#/components/schemas/NewMedia"
        Document:
            allOf:
                - $ref: "#/components/schemas/Media"
        VerificationStatus:
            type: string
            enum:
                - PENDING
                - APPROVED
                - REJECTED
        NewMedicalCertificate:
            type: object
            required:
                - document
                - expiration
            properties:
                document:
                    $ref: "#/components/schemas/NewDocument"
                expiration:
                    type: string
                    format: date
        MedicalCertificate:
            type: object
            required:
                - document
                - expiration
                - verificationStatus
            properties:
                document:
                    $ref: "#/components/schemas/Document"
                expiration:
                    type: string
                    format: date
                verificationStatus:
                    $ref: "#/components/schemas/VerificationStatus"
        NewLicense:
            type: object
            required:
                - document
            properties:
                document:
                    $ref: "#/components/schemas/NewDocument"
        License:
            type: object
            required:
                - document
                - verificationStatus
            properties:
                document:
                    $ref: "#/components/schemas/Document"
                verificationStatus:
                    $ref: "#/components/schemas/VerificationStatus"
        NewTitle:
            type: object
            required:
                - document
            properties:
                document:
                    $ref: "#/components/schemas/NewDocument"
        Title:
            type: object
            required:
                - document
            properties:
                document:
                    $ref: "#/components/schemas/Document"
        MediaContent:
            type: string
            format: byte
        MediaUri:
            type: string
            format: uri
        NewEducation:
            type: object
            required:
                - document
            properties:
                document:
                    $ref: "#/components/schemas/NewDocument"
        Education:
            type: object
            required:
                - document
                - verificationStatus
            properties:
                document:
                    $ref: "#/components/schemas/Document"
                verificationStatus:
                    $ref: "#/components/schemas/VerificationStatus"
        # Practiced Sports
        NewIDSPlaySport:
            type: object
            required:
                - sportType
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                sportRole:
                    $ref: "#/components/schemas/SportRole"
        IDSPlaySport:
            allOf:
                - $ref: "#/components/schemas/NewIDSPlaySport"
                - type: object
                  required:
                      - isGuru
                  properties:
                      percentageOfSkillsCompletion:
                          $ref: "#/components/schemas/Percentage"
                      isGuru:
                          type: boolean
                      percentageOfLevelsCompletion:
                          $ref: "#/components/schemas/Percentage"
        # Taught Sports
        NewTaughtSport:
            type: object
            required:
                - sportType
                - license
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                license:
                    $ref: "#/components/schemas/NewLicense"
        TaughtSport:
            type: object
            required:
                - sportType
                - license
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                license:
                    $ref: "#/components/schemas/License"
        # Data Types
        Timestamp:
            type: integer
            format: int64
        PositiveInteger:
            type: integer
            minimum: 0
        PositiveNumber:
            type: number
            minimum: 0
        PositiveNumberGreaterThanZero:
            type: number
            # set to 0 when the generator will support exclusiveMinimum
            minimum: 1
            # uncomment when the generator will support exclusiveMinimum
            # exclusiveMinimum: true
        Percentage:
            type: number
            minimum: 0
            maximum: 1
        # Errors
        ProblemDetails:
            type: object
            description: Problem Details
            required:
                - type
                - title
                - status
                - detail
            properties:
                type:
                    type: string
                    description: A URI reference [RFC3986] that identifies the problem type.
                title:
                    type: string
                    description: A short, human-readable summary of the problem type.
                status:
                    type: integer
                    description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
                    minimum: 0
                detail:
                    type: string
                    description: A human-readable explanation specific to this occurrence of the problem.
                instance:
                    type: string
                    description: A URI reference that identifies the specific occurrence of the problem.
        ErrorData:
            allOf:
                - $ref: "#/components/schemas/ProblemDetails"
                - type: object
                  description: Informations regarding a backend error
                  required:
                      - title
                  properties:
                      title:
                          $ref: "#/components/schemas/ErrorCode"
                      validationErrors:
                          type: array
                          items:
                              $ref: "#/components/schemas/ValidationError"
        ErrorCode:
            type: string
            enum:
                # Generic errors
                - GENERIC
                - NOT_IMPLEMENTED
                - VALIDATION
                - NOT_FOUND
                - CONFLICT
                # Auth errors
                - UNAUTHORIZED_NOT_AUTHENTICATED
                - FORBIDDEN_NOT_AUTHORIZED
                - USER_NOT_CONFIRMED
                - UPDATE_CREDENTIALS_OLD_PASSWORD_WRONG
                - USER_NOT_FOUND
                - USER_ALREADY_EXISTS
                - EXPIRED_TOKEN
                - UNAUTHORIZED_EMAIL_NOT_VERIFIED
                # Generic resources operation errors
                - RESOURCE_NOT_CREATED
                - RESOURCE_NOT_UPDATED
                - RESOURCE_NOT_DELETED
                - RESOURCE_NOT_RETRIEVED
                - RESOURCES_SEARCH_ERROR
                # Feed errors
                - POST_NOT_FOUND
                - USER_IS_NOT_AUTHOR
                - POST_HAS_ALREADY_LIKE
                - POST_HAS_NO_LIKE
                - USER_ALREADY_FOLLOWED
                - USER_NOT_FOLLOWED
                # Application specific errors
                - SPORT_SKILL_CERTIFIABILITY_LEVEL_TOO_HIGH
                - SPORT_SKILL_NOT_AVAILABLE
                # Payments errors
                - REQUIRED_CUSTOMER_WALLET_NOT_FOUND
                - REQUIRED_MERCHANT_WALLET_NOT_FOUND
                - REQUIRED_STRIPE_CUSTOMER_ID_NOT_FOUND
                - REQUIRED_STRIPE_ACCOUNT_ID_NOT_FOUND
                - PAYMENT_INTENT_DOES_NOT_BELOG_TO_CURRENT_USER
                - PAYMENT_METHOD_NOT_FOUND
                #  Skills
                - NOT_AUTHORIZED_TO_CERTIFICATE_SKILLS
                - SKILLS_AUTHORIZATION_STATUS_CANNOT_BE_UPDATED_TO_PENDING
                - SKILLS_AUTHORIZATION_STATUS_NOT_FOUND_IN_PENDING
                # Licenses
                - LICENSE_NOT_APPROVED
                # Team errors
                - TEAM_CAPTAIN_MUST_BE_GURU
                - USER_HAS_MAXIMUM_CLUB_TEAMS
                - USER_HAS_MAXIMUM_TEAMS
                - USER_IS_NOT_CLUB_ADMIN
                - TEAM_ALREADY_HAS_VICECAPTAIN
                - TEAM_HAS_NO_VICECAPTAIN
                - USER_IS_NOT_CLUB_MEMBER
                - USER_IS_NOT_TEAM_MEMBER
                - CANNOT_VIEW_PRIVATE_TEAM
                - TEAM_ HAS_MAXIMUM_MEMBERS
                - SPORT_NOT_VALID_FOR_TEAMS
                # Challenges errors
                - CHALLENGE_NOT_FOUND
                - CHALLENGE_PARTICIPANT_NOT_VALID
                - CANNOT_UPDATE_CHALLENGE
                # Memberships errors
                - COACH_NOT_VALID
                - PLAYER_NOT_VALID
                - CLUB_NOT_VALID
                - COACH_MUST_HAVE_SPORT
                - MEMBER_CANNOT_HAVE_SPORT
                - MEMBERSHIP_ALREADY_EXISTS
                - CANNOT_UPDATE_MEMBERSHIP_TO_PENDING
                - SPORT_NOT_IN_CLUB
                - COACH_OR_MEMBER_RANK_REQUIRED
                # Juniors
                - UNAUTHORIZED_JUNIOR_IS_ADULT
                - UNABLE_TO_SET_JUNIOR_PLAN
                # Club Errors
                - CLUB_NATURE_NOT_VALID
        ValidationError:
            allOf:
                - type: object
                  description: Informations regarding a validation error
                  required:
                      - field
                      - message
                  properties:
                      field:
                          type: string
                          description: The field that caused the error
                      message:
                          type: string
                          description: The error message
                - type: object
                  additionalProperties: true
        # Auth
        Login:
            type: object
            required:
                - userId
                - authorization
                - accessToken
                - refresh
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                authorization:
                    type: string
                accessToken:
                    type: string
                refresh:
                    type: string
        NewLogin:
            type: object
            required:
                - username
                - password
            properties:
                username:
                    type: string
                password:
                    $ref: "#/components/schemas/Password"
        ForgotPassword:
            type: object
            required:
                - username
            properties:
                username:
                    type: string
        ResetPassword:
            type: object
            required:
                - username
                - temporaryPassword
                - newPassword
            properties:
                username:
                    type: string
                temporaryPassword:
                    type: string
                newPassword:
                    $ref: "#/components/schemas/Password"
        Password:
            type: string
            minLength: 8
        UpdateUserCredentials:
            type: object
            required:
                - oldPassword
                - newPassword
            properties:
                oldPassword:
                    $ref: "#/components/schemas/Password"
                newPassword:
                    $ref: "#/components/schemas/Password"
        UpsertUserEmail:
            type: object
            required:
                - email
            properties:
                email:
                    $ref: "#/components/schemas/Email"
        Nationality:
            type: string
            # pattern: ^[A-Z]{3}$ # ISO 3166-1 alpha-3
        # Signup
        SignupConfirmationRequest:
            type: object
            required:
                - email
            properties:
                email:
                    $ref: "#/components/schemas/Email"
        Signup:
            type: object
            required:
                - user
                - password
            properties:
                user:
                    type: object
                    properties:
                        idsPlay:
                            $ref: "#/components/schemas/NewIDSPlay"
                        club:
                            $ref: "#/components/schemas/NewClub"
                password:
                    $ref: "#/components/schemas/Password"
        NewUser:
            type: object
            required:
                - locale
                - email
            properties:
                email:
                    $ref: "#/components/schemas/Email"
                phoneNumber:
                    $ref: "#/components/schemas/PhoneNumber"
                locale:
                    $ref: "#/components/schemas/Locale"
                spokenLocales:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/SpokenLocale"
                address:
                    $ref: "#/components/schemas/Address"
        NewIDSPlay:
            allOf:
                - $ref: "#/components/schemas/NewUser"
                - type: object
                  required:
                      - givenName
                      - familyName
                      - username
                  properties:
                      givenName:
                          type: string
                      familyName:
                          type: string
                      username:
                          type: string
                      birthdate:
                          $ref: "#/components/schemas/Birthdate"
                      description:
                          type: string
                      insured:
                          type: boolean
                      averageHeartRate:
                          $ref: "#/components/schemas/PositiveInteger"
                      averageLowBloodPressure:
                          $ref: "#/components/schemas/PositiveInteger"
                      averageHighBloodPressure:
                          $ref: "#/components/schemas/PositiveInteger"
                      primaryHand:
                          $ref: "#/components/schemas/PrimaryHand"
                      primaryFoot:
                          $ref: "#/components/schemas/PrimaryFoot"
                      foodIntollerances:
                          type: array
                          items:
                              $ref: "#/components/schemas/FoodIntollerance"
                      bloodType:
                          $ref: "#/components/schemas/BloodType"
                      traumas:
                          type: array
                          items:
                              $ref: "#/components/schemas/Trauma"
                      medicalOperations:
                          type: array
                          items:
                              $ref: "#/components/schemas/MedicalOperation"
                      medicines:
                          type: array
                          items:
                              $ref: "#/components/schemas/Medicine"
                      hereditaryDiseases:
                          type: array
                          items:
                              $ref: "#/components/schemas/HereditaryDisease"
                      foodAllergies:
                          type: array
                          items:
                              $ref: "#/components/schemas/FoodAllergy"
                      profession:
                          $ref: "#/components/schemas/Profession"
                      taxCode:
                          type: string
                      gender:
                          $ref: "#/components/schemas/Gender"
        NewClub:
            allOf:
                - $ref: "#/components/schemas/NewUser"
                - type: object
                  required:
                      - name
                      - clubNature
                  properties:
                      name:
                          type: string
                      logo:
                          $ref: "#/components/schemas/MediaContent"
                      incorporationYear:
                          $ref: "#/components/schemas/PositiveInteger"
                      description:
                          type: string
                      taxCode:
                          type: string
                      vatNumber:
                          type: string
                      numberOfMembers:
                          $ref: "#/components/schemas/PositiveInteger"
                      sports:
                          type: array
                          items:
                              $ref: "#/components/schemas/ClubSport"
                      bookingUrl:
                          type: string
                      clubNature:
                          $ref: "#/components/schemas/ClubNature"
        # User Profile
        UserProfileStatus:
            type: string
            enum:
                - INACTIVE
                - ACTIVE
                - COMPLETED
        UserProfile:
            type: object
            properties:
                idsPlay:
                    $ref: "#/components/schemas/IDSPlay"
                idsGuru:
                    $ref: "#/components/schemas/IDSGuru"
                club:
                    $ref: "#/components/schemas/Club"
                junior:
                    $ref: "#/components/schemas/Junior"
                isFollowed:
                    type: boolean
        User:
            allOf:
                - type: object
                  required:
                      - userId
                      - userType
                  properties:
                      userId:
                          $ref: "#/components/schemas/UserId"
                      userType:
                          $ref: "#/components/schemas/UserType"
                      spokenLocales:
                          type: array
                          items:
                              $ref: "#/components/schemas/SpokenLocale"
        IDSPlay:
            allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  required:
                      - givenName
                      - familyName
                      - username
                  properties:
                      givenName:
                          type: string
                      familyName:
                          type: string
                      birthdate:
                          $ref: "#/components/schemas/Birthdate"
                      primaryHand:
                          $ref: "#/components/schemas/PrimaryHand"
                      primaryFoot:
                          $ref: "#/components/schemas/PrimaryFoot"
                      gender:
                          $ref: "#/components/schemas/Gender"
                      nationality:
                          $ref: "#/components/schemas/Nationality"
                      education:
                          $ref: "#/components/schemas/Education"
                      sports:
                          type: array
                          items:
                              $ref: "#/components/schemas/IDSPlaySport"
                      picture:
                          $ref: "#/components/schemas/MediaUri"
                      username:
                          type: string
                      description:
                          type: string
                      address:
                          $ref: "#/components/schemas/Address"
                      clubsMemberships:
                          $ref: "#/components/schemas/UserClubsMemberships"
                      clubsCoaching:
                          $ref: "#/components/schemas/UserClubsCoaching"
        IDSGuru:
            allOf:
                - $ref: "#/components/schemas/IDSPlay"
                - type: object
                  required:
                      - email
                  properties:
                      email:
                          $ref: "#/components/schemas/Email"
                      phoneNumber:
                          $ref: "#/components/schemas/PhoneNumber"
                      presentationVideo:
                          $ref: "#/components/schemas/MediaUri"
                      guruDescriprion:
                          type: string
                      clubsMemberships:
                          $ref: "#/components/schemas/UserClubsMemberships"
                      clubsCoaching:
                          $ref: "#/components/schemas/UserClubsCoaching"
                      professionalContacts:
                          $ref: "#/components/schemas/Contacts"
                      sdi:
                          type: string
        Club:
            allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  required:
                      - name
                      - email
                      - clubNature
                  properties:
                      name:
                          type: string
                      incorporationYear:
                          $ref: "#/components/schemas/PositiveInteger"
                      address:
                          $ref: "#/components/schemas/Address"
                      email:
                          $ref: "#/components/schemas/Email"
                      phoneNumber:
                          $ref: "#/components/schemas/PhoneNumber"
                      sports:
                          type: array
                          items:
                              $ref: "#/components/schemas/ClubSport"
                      titles:
                          type: array
                          items:
                              $ref: "#/components/schemas/Title"
                      numberOfMembers:
                          $ref: "#/components/schemas/PositiveInteger"
                      description:
                          type: string
                      logo:
                          $ref: "#/components/schemas/MediaUri"
                      pictures:
                          type: array
                          items:
                              $ref: "#/components/schemas/Picture"
                      bookingUrl:
                          type: string
                      clubMembers:
                          $ref: "#/components/schemas/ClubMembers"
                      clubCoaches:
                          $ref: "#/components/schemas/ClubCoaches"
                      clubNature:
                          $ref: "#/components/schemas/ClubNature"
        Junior:
            allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  required:
                      - locale
                      - parent
                      - givenName
                      - familyName
                      - username
                      - birthdate
                  properties:
                      locale:
                          $ref: "#/components/schemas/Locale"
                      parent:
                          $ref: "#/components/schemas/ParentOverview"
                      givenName:
                          type: string
                      familyName:
                          type: string
                      username:
                          type: string
                      birthdate:
                          $ref: "#/components/schemas/Birthdate"
                      email:
                          $ref: "#/components/schemas/Email"
                      address:
                          $ref: "#/components/schemas/Address"
                      nationality:
                          $ref: "#/components/schemas/Nationality"
                      spokenLocales:
                          type: array
                          items:
                              $ref: "#/components/schemas/SpokenLocale"
                      gender:
                          $ref: "#/components/schemas/Gender"
                      description:
                          type: string
                      education:
                          $ref: "#/components/schemas/Education"
                      sports:
                          type: array
                          items:
                              $ref: "#/components/schemas/IDSPlaySport"
                      picture:
                          $ref: "#/components/schemas/MediaUri"
        # Personal User Profile
        PersonalProfile:
            type: object
            properties:
                idsPlay:
                    $ref: "#/components/schemas/PersonalIDSPlayProfile"
                idsGuru:
                    $ref: "#/components/schemas/PersonalIDSGuruProfile"
                club:
                    $ref: "#/components/schemas/PersonalClubProfile"
                junior:
                    $ref: "#/components/schemas/PersonalJuniorProfile"
        PersonalUserProfile:
            type: object
            required:
                - profileStatus
            properties:
                profileStatus:
                    $ref: "#/components/schemas/UserProfileStatus"
        PersonalIDSPlayProfile:
            allOf:
                - $ref: "#/components/schemas/IDSPlay"
                - $ref: "#/components/schemas/PersonalUserProfile"
                - type: object
                  required:
                      - locale
                      - email
                  properties:
                      email:
                          $ref: "#/components/schemas/Email"
                      phoneNumber:
                          $ref: "#/components/schemas/PhoneNumber"
                      locale:
                          $ref: "#/components/schemas/Locale"
                      address:
                          $ref: "#/components/schemas/Address"
                      states:
                          type: array
                          items:
                              $ref: "#/components/schemas/IDSPlayState"
                      medicalCertificates:
                          type: array
                          items:
                              $ref: "#/components/schemas/MedicalCertificate"
                      certifications:
                          type: array
                          items:
                              $ref: "#/components/schemas/Certification"
                      description:
                          type: string
                      insured:
                          type: boolean
                      averageHeartRate:
                          $ref: "#/components/schemas/PositiveInteger"
                      averageLowBloodPressure:
                          $ref: "#/components/schemas/PositiveInteger"
                      averageHighBloodPressure:
                          $ref: "#/components/schemas/PositiveInteger"
                      foodIntollerances:
                          type: array
                          items:
                              $ref: "#/components/schemas/FoodIntollerance"
                      bloodType:
                          $ref: "#/components/schemas/BloodType"
                      traumas:
                          type: array
                          items:
                              $ref: "#/components/schemas/Trauma"
                      medicalOperations:
                          type: array
                          items:
                              $ref: "#/components/schemas/MedicalOperation"
                      medicines:
                          type: array
                          items:
                              $ref: "#/components/schemas/Medicine"
                      hereditaryDiseases:
                          type: array
                          items:
                              $ref: "#/components/schemas/HereditaryDisease"
                      foodAllergies:
                          type: array
                          items:
                              $ref: "#/components/schemas/FoodAllergy"
                      profession:
                          $ref: "#/components/schemas/Profession"
                      taxCode:
                          type: string
        PersonalIDSGuruProfile:
            allOf:
                - $ref: "#/components/schemas/IDSGuru"
                - $ref: "#/components/schemas/PersonalIDSPlayProfile"
                - type: object
                  required:
                      - guruProfileStatus
                      - taughtSports
                  properties:
                      vatNumber:
                          type: string
                      guruProfileStatus:
                          $ref: "#/components/schemas/UserProfileStatus"
                      taughtSports:
                          type: array
                          items:
                              $ref: "#/components/schemas/TaughtSport"
        PersonalClubProfile:
            allOf:
                - $ref: "#/components/schemas/Club"
                - $ref: "#/components/schemas/PersonalUserProfile"
                - type: object
                  properties:
                      taxCode:
                          type: string
                      vatNumber:
                          type: string
                      documents:
                          type: array
                          items:
                              $ref: "#/components/schemas/Document"
        PersonalJuniorProfile:
            allOf:
                - $ref: "#/components/schemas/Junior"
                - $ref: "#/components/schemas/PersonalUserProfile"
        # User Update
        UserUpdate:
            type: object
            properties:
                phoneNumber:
                    $ref: "#/components/schemas/PhoneNumber"
                locale:
                    $ref: "#/components/schemas/Locale"
                spokenLocales:
                    type: array
                    nullable: true
                    items:
                        $ref: "#/components/schemas/SpokenLocale"
                address:
                    $ref: "#/components/schemas/Address"
        IDSPlayUpdate:
            allOf:
                - $ref: "#/components/schemas/UserUpdate"
                - type: object
                  properties:
                      givenName:
                          type: string
                      familyName:
                          type: string
                      birthdate:
                          $ref: "#/components/schemas/Birthdate"
                      description:
                          type: string
                      insured:
                          type: boolean
                      averageHeartRate:
                          $ref: "#/components/schemas/PositiveInteger"
                      averageLowBloodPressure:
                          $ref: "#/components/schemas/PositiveInteger"
                      averageHighBloodPressure:
                          $ref: "#/components/schemas/PositiveInteger"
                      primaryHand:
                          $ref: "#/components/schemas/PrimaryHand"
                      primaryFoot:
                          $ref: "#/components/schemas/PrimaryFoot"
                      foodIntollerances:
                          type: array
                          items:
                              $ref: "#/components/schemas/FoodIntollerance"
                      bloodType:
                          $ref: "#/components/schemas/BloodType"
                      traumas:
                          type: array
                          items:
                              $ref: "#/components/schemas/Trauma"
                      medicalOperations:
                          type: array
                          items:
                              $ref: "#/components/schemas/MedicalOperation"
                      medicines:
                          type: array
                          items:
                              $ref: "#/components/schemas/Medicine"
                      hereditaryDiseases:
                          type: array
                          items:
                              $ref: "#/components/schemas/HereditaryDisease"
                      foodAllergies:
                          type: array
                          items:
                              $ref: "#/components/schemas/FoodAllergy"
                      profession:
                          $ref: "#/components/schemas/Profession"
                      sports:
                          type: array
                          nullable: true
                          items:
                              $ref: "#/components/schemas/NewIDSPlaySport"
                      states:
                          type: array
                          items:
                              $ref: "#/components/schemas/NewIDSPlayState"
                      taxCode:
                          type: string
                      gender:
                          $ref: "#/components/schemas/Gender"
                      nationality:
                          $ref: "#/components/schemas/Nationality"
                      clubsMemberships:
                          $ref: "#/components/schemas/UserClubsMemberships"
                      clubsCoaching:
                          $ref: "#/components/schemas/UserClubsCoaching"
        IDSGuruUpdate:
            allOf:
                - $ref: "#/components/schemas/IDSPlayUpdate"
                - type: object
                  properties:
                      vatNumber:
                          type: string
                      presentationVideo:
                          $ref: "#/components/schemas/MediaContent"
                      guruDescriprion:
                          type: string
                      clubsMemberships:
                          $ref: "#/components/schemas/UserClubsMemberships"
                      clubsCoaching:
                          $ref: "#/components/schemas/UserClubsCoaching"
                      professionalContacts:
                          $ref: "#/components/schemas/Contacts"
                      sdi:
                          type: string
        ClubUpdate:
            allOf:
                - $ref: "#/components/schemas/UserUpdate"
                - type: object
                  properties:
                      name:
                          type: string
                      logo:
                          $ref: "#/components/schemas/MediaContent"
                      incorporationYear:
                          $ref: "#/components/schemas/PositiveInteger"
                      description:
                          type: string
                      taxCode:
                          type: string
                      vatNumber:
                          type: string
                      numberOfMembers:
                          $ref: "#/components/schemas/PositiveInteger"
                      sports:
                          type: array
                          nullable: true
                          items:
                              $ref: "#/components/schemas/ClubSport"
                      bookingUrl:
                          type: string
                      clubMembers:
                          $ref: "#/components/schemas/ClubMembers"
                      clubCoaches:
                          $ref: "#/components/schemas/ClubCoaches"
        JuniorUpdate:
            type: object
            properties:
                locale:
                    $ref: "#/components/schemas/Locale"
                givenName:
                    type: string
                familyName:
                    type: string
                username:
                    type: string
                email:
                    $ref: "#/components/schemas/Email"
                address:
                    $ref: "#/components/schemas/Address"
                nationality:
                    $ref: "#/components/schemas/Nationality"
                spokenLocales:
                    type: array
                    items:
                        $ref: "#/components/schemas/SpokenLocale"
                gender:
                    $ref: "#/components/schemas/Gender"
                description:
                    type: string
                sports:
                    type: array
                    items:
                        $ref: "#/components/schemas/IDSPlaySport"
        UpdateUserProfile:
            type: object
            properties:
                idsPlay:
                    $ref: "#/components/schemas/IDSPlayUpdate"
                idsGuru:
                    $ref: "#/components/schemas/IDSGuruUpdate"
                club:
                    $ref: "#/components/schemas/ClubUpdate"
                junior:
                    $ref: "#/components/schemas/JuniorUpdate"
        # Search
        UserProfileSearchResult:
            type: object
            required:
                - userId
                - name
                - pictures
                - userType
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                name:
                    type: string
                pictures:
                    type: array
                    items:
                        $ref: "#/components/schemas/Picture"
                logo:
                    $ref: "#/components/schemas/MediaUri"
                userType:
                    $ref: "#/components/schemas/UserType"
                sportTypes:
                    type: array
                    items:
                        $ref: "#/components/schemas/SportType"
                taughtSportTypes:
                    type: array
                    items:
                        $ref: "#/components/schemas/SportType"
                address:
                    $ref: "#/components/schemas/Address"
                username:
                    type: string
                clubNature:
                    $ref: "#/components/schemas/ClubNature"
                gender:
                    $ref: "#/components/schemas/Gender"
                sportRole:
                    $ref: "#/components/schemas/SportRole"
                sportLevel:
                    $ref: "#/components/schemas/SportLevel"
                moveLevel:
                    $ref: "#/components/schemas/PositiveInteger"
        UserProfileSearchResults:
            type: object
            required:
                - numberOfItems
                - items
            properties:
                numberOfItems:
                    $ref: "#/components/schemas/PositiveInteger"
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserProfileSearchResult"
        SearchUserProfilesSortField:
            type: string
            enum:
                - MOVE_LEVEL
                - SPORT_LEVEL
        # Push Notification
        NewPushNotificationDevice:
            type: object
            required:
                - deviceToken
            properties:
                deviceToken:
                    type: string
        PushNotificationDevice:
            type: object
            required:
                - deviceId
                - deviceToken
            properties:
                deviceId:
                    type: string
                deviceToken:
                    type: string
        PushNotificationDevices:
            type: array
            items:
                $ref: "#/components/schemas/PushNotificationDevice"
        Notification:
            type: object
            required:
                - message
            properties:
                message:
                    $ref: "#/components/schemas/NotificationMessage"
        NotificationMessage:
            type: object
            required:
                - notification
                - data
            properties:
                notification:
                    $ref: "#/components/schemas/NotificationMessagePayload"
                data:
                    $ref: "#/components/schemas/NotificationMessageData"
        NotificationMessagePayload:
            type: object
            required:
                - title
                - body
            properties:
                title:
                    type: string
                body:
                    type: string
        NotificationMessageData:
            type: object
            required:
                - notificationId
                - dateTime
                - type
                - seen
            properties:
                notificationId:
                    type: string
                dateTime:
                    type: string
                    format: date-time
                type:
                    $ref: "#/components/schemas/NotificationType"
                seen:
                    type: boolean
                typeData:
                    $ref: "#/components/schemas/NotificationTypeData"
        ChallengeNotificationTypeData:
            type: object
            required:
                - challengeId
            properties:
                challengeId:
                    type: string
                    format: uuid
        BookingNotificationTypeData:
            type: object
            required:
                - bookingId
            properties:
                bookingId:
                    type: string
                    format: uuid
        NotificationTypeData:
            type: object
            description: |
                The data associated to a notification type.

                The data structure depends on the notification type.

                It is a map with NotificationType as key.
            properties:
                MOVE_GOAL_REACHED:
                    type: object
                    required:
                        - userMoveGoal
                    properties:
                        userMoveGoal:
                            $ref: "#/components/schemas/UserMoveGoal"
                USER_LIKES_YOUR_POST:
                    type: object
                    required:
                        - postId
                        - userId
                    properties:
                        postId:
                            type: string
                            format: uuid
                        userId:
                            type: string
                            format: uuid
                USER_FOLLOWED_YOU:
                    type: object
                    required:
                        - userId
                    properties:
                        userId:
                            type: string
                            format: uuid
                USER_SHARED_YOUR_POST:
                    type: object
                    required:
                        - postId
                        - userId
                    properties:
                        postId:
                            type: string
                            format: uuid
                        userId:
                            type: string
                            format: uuid
                SKILLS_AUTHORIZATION_REQUEST_TO_CLUB:
                    type: object
                    required:
                        - clubId
                        - playerId
                        - guruId
                        - sportType
                    properties:
                        clubId:
                            type: string
                        playerId:
                            type: string
                        guruId:
                            type: string
                        sportType:
                            $ref: "#/components/schemas/SportType"
                SKILLS_AUTHORIZATION_ISSUED_BY_CLUB:
                    type: object
                    required:
                        - clubId
                        - playerId
                        - guruId
                        - sportType
                    properties:
                        clubId:
                            type: string
                        playerId:
                            type: string
                        guruId:
                            type: string
                        sportType:
                            $ref: "#/components/schemas/SportType"
                SKILLS_AUTHORIZATION_DENIED_BY_CLUB:
                    type: object
                    required:
                        - clubId
                        - playerId
                        - guruId
                        - sportType
                    properties:
                        clubId:
                            type: string
                        playerId:
                            type: string
                        guruId:
                            type: string
                        sportType:
                            $ref: "#/components/schemas/SportType"
                TEAM_CHALLENGE_INVITATION:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_ACCEPTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_DETAILS_ADDED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_REJECTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_MODIFIED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_REMINDER:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_RESULT:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_RESULT_MODIFIED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_RESULT_ACCEPTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                TEAM_CHALLENGE_RESULT_REJECTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_INVITATION:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_ACCEPTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_DETAILS_ADDED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_REJECTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_MODIFIED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_REMINDER:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_RESULT:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_RESULT_MODIFIED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_RESULT_ACCEPTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                PLAYER_CHALLENGE_RESULT_REJECTED:
                    $ref: "#/components/schemas/ChallengeNotificationTypeData"
                SENIOR_FOLLOWED_JUNIOR:
                    type: object
                    required:
                        - juniorId
                        - seniorId
                        - parentId
                    properties:
                        juniorId:
                            type: string
                            format: uuid
                        seniorId:
                            type: string
                            format: uuid
                        parentId:
                            type: string
                            format: uuid
                FOLLOW_REQUEST:
                    type: object
                    required:
                        - followerId
                    properties:
                        followerId:
                            type: string
                            format: uuid
                SERVICE_BOOKING_RECEIVED:
                    $ref: "#/components/schemas/BookingNotificationTypeData"
                SERVICE_BOOKING_DETAILS_UPDATED:
                    $ref: "#/components/schemas/BookingNotificationTypeData"
                SERVICE_BOOKING_CONFIRMED:
                    $ref: "#/components/schemas/BookingNotificationTypeData"
                SERVICE_BOOKING_CANCELED:
                    $ref: "#/components/schemas/BookingNotificationTypeData"
                PAYMENT_RECEIVED:
                    type: object
                    required:
                        - transaction
                        - fromUserId
                    properties:
                        transaction:
                            $ref: "#/components/schemas/Transaction"
                        fromUserId:
                            type: string
                            format: uuid
                        bookingId:
                            type: string
                            format: uuid
                SERVICE_EXPIRED:
                    type: object
                    required:
                        - serviceId
                        - serviceProvider
                    properties:
                        serviceId:
                            type: string
                            format: uuid
                        serviceProvider:
                            $ref: "#/components/schemas/BasicUserData"
                LESSON_COMPLETED:
                    type: object
                    required:
                        - bookingId
                    properties:
                        bookingId:
                            type: string
                            format: uuid
        NotificationType:
            type: string
            enum:
                # Profile
                - PLAYER_PROFILE_INACTIVE
                - PLAYER_PROFILE_ACTIVATED
                - PLAYER_PROFILE_COMPLETED
                - GURU_PROFILE_INACTIVE
                - GURU_PROFILE_ACTIVATED
                - GURU_PROFILE_COMPLETED
                - CLUB_PROFILE_INACTIVE
                - CLUB_PROFILE_ACTIVATED
                - CLUB_PROFILE_COMPLETED
                - KEEP_YOUR_PROFILE_UP_TO_DATE
                # Health
                - BMI_UPDATED
                - GENERAL_CHECKUP_REMINDER
                # Medical Certificate
                - MEDICAL_CERTIFICATE_EXPIRES_IN_ONE_MONTH
                - MEDICAL_CERTIFICATE_EXPIRES_IN_ONE_WEEK
                - MEDICAL_CERTIFICATE_EXPIRES_IN_ONE_DAY
                # Team
                - TEAM_CREATED
                - TEAM_DELETED
                - TEAM_JOINED
                - CREATE_A_TEAM_REMINDER
                - TEAM_INVITATION
                - TEAM_JOIN_REQUEST
                # Skill Goals
                - SKILLS_CERTIFIED
                - SKILLS_CERTIFICATION_RENEWED
                - SKILLS_EXPIRED
                - SKILLS_AUTHORIZATION_REQUEST_TO_CLUB
                - SKILLS_AUTHORIZATION_ISSUED_BY_CLUB
                - SKILLS_AUTHORIZATION_DENIED_BY_CLUB
                # Skill Levels
                - LEVELS_CERTIFIED
                - LEVELS_CERTIFICATION_RENEWED
                - LEVELS_EXPIRED
                # Move Goals
                - ADD_SPORT_AND_FITNESS_SESSIONS
                - ONE_WEEK_WITHOUT_PHYSICAL_ACTIVITY
                - MOVE_GOAL_ALMOST_REACHED
                - MOVE_GOAL_REACHED
                - MOVE_GOAL_NOT_REACHED
                - MOVE_GOALS_SEASON_ENDED
                # Membership
                - MEMBER_INVITE_BY_CLUB
                - MEMBER_ACCEPTED_INVITE_BY_CLUB
                - MEMBER_DECLINED_INVITE_BY_CLUB
                - GURU_ACCEPTED_INVITE_BY_CLUB
                - GURU_DECLINED_INVITE_BY_CLUB
                - GURU_INVITE_REQUEST_TO_CLUB
                - PLAYER_INVITE_REQUEST_TO_CLUB
                - CLUB_ACCEPTED_INVITE_BY_PLAYER
                - CLUB_DECLINED_INVITE_BY_PLAYER
                - CLUB_ACCEPTED_INVITE_BY_GURU
                - CLUB_DECLINED_INVITE_BY_GURU
                # Feed
                - USER_LIKES_YOUR_POST
                - USER_FOLLOWED_YOU
                - USER_SHARED_YOUR_POST
                # Challenge
                - TEAM_CHALLENGE_INVITATION
                - TEAM_CHALLENGE_ACCEPTED
                - TEAM_CHALLENGE_DETAILS_ADDED
                - TEAM_CHALLENGE_REJECTED
                - TEAM_CHALLENGE_MODIFIED
                - TEAM_CHALLENGE_REMINDER
                - TEAM_CHALLENGE_RESULT
                - TEAM_CHALLENGE_RESULT_MODIFIED
                - TEAM_CHALLENGE_RESULT_ACCEPTED
                - TEAM_CHALLENGE_RESULT_REJECTED
                - PLAYER_CHALLENGE_INVITATION
                - PLAYER_CHALLENGE_ACCEPTED
                - PLAYER_CHALLENGE_DETAILS_ADDED
                - PLAYER_CHALLENGE_REJECTED
                - PLAYER_CHALLENGE_MODIFIED
                - PLAYER_CHALLENGE_REMINDER
                - PLAYER_CHALLENGE_RESULT
                - PLAYER_CHALLENGE_RESULT_MODIFIED
                - PLAYER_CHALLENGE_RESULT_ACCEPTED
                - PLAYER_CHALLENGE_RESULT_REJECTED
                # Documents verification
                - DOCUMENT_VERIFICATION_REQUESTED
                - DOCUMENT_VERIFICATION_APPROVED
                - DOCUMENT_VERIFICATION_REJECTED
                # Junior
                - SENIOR_FOLLOWED_JUNIOR
                - JUNIOR_PASSWORD_RESET
                - FOLLOW_REQUEST
                # Events
                - EVENT_PARTICIPATION_REQUESTED
                - EVENT_PARTICIPATION_CONFIRMED
                - EVENT_REMINDER_DAY_BEFORE
                - EVENT_REMINDER_ONE_HOUR_BEFORE
                # Marketplace services
                - SERVICE_EXPIRED
                # Marketplace bookings
                - SERVICE_BOOKING_RECEIVED
                - SERVICE_BOOKING_DETAILS_UPDATED
                - SERVICE_BOOKING_CONFIRMED
                - SERVICE_BOOKING_CANCELED
                # Lessons
                - LESSON_COMPLETED
                # Payments
                - PAYMENT_RECEIVED
        UpdateNotification:
            type: object
            properties:
                seen:
                    type: boolean
        # Sport Roles
        SportRole:
            type: string
            enum:
                # Football
                - GOALKEEPER
                - CENTER_BACK
                - RIGHT_BACK
                - LEFT_BACK
                - RIGHT_WING_BACK
                - LEFT_WING_BACK
                - CENTRAL_MIDFIELDER
                - DEFENSIVE_MIDFIELDER
                - CENTRAL_ATTACKING_MIDFIELDER
                - LEFT_MIDFIELDER
                - RIGHT_MIDFIELDER
                - RIGHT_FORWARD
                - LEFT_FORWARD
                - RIGHT_WINGER
                - LEFT_WINGER
                - STRIKER
                # Five A Side Football
                # - GOALKEEPER
                - DEFENDER
                - INTERMEDIATE
                - PIVOT
                - UNIVERSAL
                # Volleyball
                - SETTER
                - OUTSIDE_HITTER
                - OPPOSITE_HITTER
                - MIDDLE_BLOCKER
                - LIBERO
                # Basketball
                - POINT_GUARD
                - SHOOTING_GUARD
                - SMALL_FORWARD
                - POWER_FORWARD
                - CENTER
                # Ice Hockey
                # - GOALKEEPER
                # - DEFENDER
                - WINGER
                # - CENTER
                # Rugby
                - RIGHT_PROP
                - LEFT_PROP
                - HOOKER
                - LOCK
                - FLANKER
                - NUMBER_EIGHT
                - SCRUM_HALF
                - FLY_HALF
                - CENTRE
                - WING
                - FULLBACK
        FootballSportRole:
            type: string
            enum:
                - GOALKEEPER
                - CENTER_BACK
                - RIGHT_BACK
                - LEFT_BACK
                - RIGHT_WING_BACK
                - LEFT_WING_BACK
                - CENTRAL_MIDFIELDER
                - DEFENSIVE_MIDFIELDER
                - CENTRAL_ATTACKING_MIDFIELDER
                - LEFT_MIDFIELDER
                - RIGHT_MIDFIELDER
                - RIGHT_FORWARD
                - LEFT_FORWARD
                - RIGHT_WINGER
                - LEFT_WINGER
                - STRIKER
        FiveASideFootballSportRole:
            type: string
            enum:
                - GOALKEEPER
                - DEFENDER
                - INTERMEDIATE
                - PIVOT
                - UNIVERSAL
        VolleyballSportRole:
            type: string
            enum:
                - SETTER
                - OUTSIDE_HITTER
                - OPPOSITE_HITTER
                - MIDDLE_BLOCKER
                - LIBERO
        BasketballSportRole:
            type: string
            enum:
                - POINT_GUARD
                - SHOOTING_GUARD
                - SMALL_FORWARD
                - POWER_FORWARD
                - CENTER
        HockeySportRole:
            type: string
            enum:
                - GOALKEEPER
                - DEFENDER
                - WINGER
                - CENTER
        RugbySportRole:
            type: string
            enum:
                - RIGHT_PROP
                - LEFT_PROP
                - HOOKER
                - LOCK
                - FLANKER
                - NUMBER_EIGHT
                - SCRUM_HALF
                - FLY_HALF
                - CENTRE
                - WING
                - FULLBACK
        AssignSportRole:
            type: object
            required:
                - sportRole
            properties:
                sportRole:
                    $ref: "#/components/schemas/SportRole"
        # Sport Skills
        Certifier:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
        # Sports Certifications Skills
        SportSkillId:
            type: object
            required:
                - sportSkillId
            properties:
                sportSkillId:
                    type: string
        SkillsToCertify:
            type: object
            required:
                - skills
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                skills:
                    type: array
                    items:
                        $ref: "#/components/schemas/SportSkillId"
        SportSkillCategory:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
        SportSkill:
            type: object
            required:
                - id
                - name
                - sportType
                - category
                - rank
            properties:
                name:
                    type: string
                sportType:
                    $ref: "#/components/schemas/SportType"
                description:
                    type: string
                category:
                    $ref: "#/components/schemas/SportSkillCategory"
                rank:
                    type: number
                id:
                    type: string
        SportSkills:
            type: array
            items:
                $ref: "#/components/schemas/SportSkill"
        UserSportSkill:
            type: object
            required:
                - name
                - sportType
                - category
                - rank
                - expired
            properties:
                name:
                    type: string
                sportType:
                    $ref: "#/components/schemas/SportType"
                autoCertified:
                    type: boolean
                certification:
                    $ref: "#/components/schemas/LevelCertification"
                category:
                    $ref: "#/components/schemas/SportSkillCategory"
                rank:
                    type: number
                expired:
                    type: boolean
        UserSkillsBySport:
            type: object
            required:
                - sportType
                - skills
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                skills:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserSportSkill"
                percentageOfCompletion:
                    $ref: "#/components/schemas/Percentage"
        # Sports Certifications Levels
        LevelCertification:
            type: object
            required:
                - certifiedAt
                - certifier
            properties:
                certifiedAt:
                    type: string
                    format: date-time
                certifier:
                    $ref: "#/components/schemas/Certifier"
        LevelsToCertify:
            type: object
            required:
                - levels
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                levels:
                    type: array
                    items:
                        $ref: "#/components/schemas/SportLevelId"
        SportLevelId:
            type: object
            required:
                - sportLevelId
            properties:
                sportLevelId:
                    type: string
        SportLevelCategory:
            type: object
            required:
                - name
                - description
            properties:
                name:
                    type: string
                description:
                    type: string
        SportLevel:
            type: object
            required:
                - id
                - name
                - sportType
                - category
                - sublevelRank
            properties:
                name:
                    type: string
                sportType:
                    $ref: "#/components/schemas/SportType"
                description:
                    type: string
                category:
                    $ref: "#/components/schemas/SportLevelCategory"
                sublevelRank:
                    type: number
                id:
                    type: string
        SportLevels:
            type: array
            items:
                $ref: "#/components/schemas/SportLevel"
        UserSportLevel:
            type: object
            required:
                - id
                - name
                - sportType
                - description
                - category
                - sublevelRank
                - expired
            properties:
                id:
                    type: string
                name:
                    type: string
                sportType:
                    $ref: "#/components/schemas/SportType"
                autoCertified:
                    type: boolean
                certification:
                    $ref: "#/components/schemas/LevelCertification"
                description:
                    type: string
                category:
                    $ref: "#/components/schemas/SportLevelCategory"
                sublevelRank:
                    type: number
                expired:
                    type: boolean
        UserLevelsBySport:
            type: object
            required:
                - sportType
                - levels
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                levels:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserSportLevel"
                percentageOfCompletion:
                    $ref: "#/components/schemas/Percentage"
        # Sports Certifications Authorization
        SportCertificationAuthorizationRequest:
            type: object
            required:
                - playerId
                - clubId
                - sportType
            properties:
                playerId:
                    $ref: "#/components/schemas/UserId"
                clubId:
                    $ref: "#/components/schemas/UserId"
                sportType:
                    $ref: "#/components/schemas/SportType"
        SportCertificationAuthorizationStatus:
            type: string
            enum:
                - PENDING
                - ISSUED
                - DENIED
        BasicUserData:
            type: object
            required:
                - userId
                - userType
                - username
                - name
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                userType:
                    $ref: "#/components/schemas/UserType"
                username:
                    type: string
                name:
                    type: string
                picture:
                    $ref: "#/components/schemas/MediaUri"
        SportCertificationAuthorization:
            type: object
            required:
                - guru
                - player
                - sportType
                - status
                - date
            properties:
                guru:
                    $ref: "#/components/schemas/BasicUserData"
                club:
                    $ref: "#/components/schemas/BasicUserData"
                player:
                    $ref: "#/components/schemas/BasicUserData"
                sportType:
                    $ref: "#/components/schemas/SportType"
                status:
                    $ref: "#/components/schemas/SportCertificationAuthorizationStatus"
                date:
                    $ref: "#/components/schemas/Timestamp"
        UpdateSportCertificationAuthorizationStatus:
            type: object
            required:
                - status
                - playerId
                - guruOrClubId
                - sportType
            properties:
                status:
                    $ref: "#/components/schemas/SportCertificationAuthorizationStatus"
                playerId:
                    $ref: "#/components/schemas/UserId"
                guruOrClubId:
                    $ref: "#/components/schemas/UserId"
                sportType:
                    $ref: "#/components/schemas/SportType"
        # Team
        TeamInvitation:
            type: object
            required:
                - invitationStatus
            properties:
                invitationStatus:
                    $ref: "#/components/schemas/TeamInvitationStatus"
        UserTeams:
            type: object
            required:
                - teams
                - clubTeams
            properties:
                teams:
                    type: array
                    items:
                        $ref: "#/components/schemas/Team"
                clubTeams:
                    type: array
                    items:
                        $ref: "#/components/schemas/ClubTeam"
        TeamInvitationType:
            type: string
            enum:
                - USER_TO_TEAM
                - TEAM_TO_USER
        TeamInfo:
            type: object
            required:
                - teamId
                - name
                - sportType
                - invitationType
            properties:
                teamId:
                    type: string
                    format: uuid
                name:
                    type: string
                logo:
                    $ref: "#/components/schemas/MediaUri"
                sportType:
                    $ref: "#/components/schemas/SportType"
                invitationType:
                    $ref: "#/components/schemas/TeamInvitationType"
        TeamLocation:
            type: object
            required:
                - city
                - region
            properties:
                city:
                    type: string
                region:
                    type: string
        CreateTeam:
            type: object
            required:
                - name
                - slogan
                - address
                - sportType
            properties:
                name:
                    type: string
                logo:
                    $ref: "#/components/schemas/MediaContent"
                picture:
                    $ref: "#/components/schemas/MediaContent"
                slogan:
                    type: string
                address:
                    $ref: "#/components/schemas/TeamLocation"
                sportType:
                    $ref: "#/components/schemas/SportType"
                membersIds:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserId"
        TeamPictures:
            type: object
            properties:
                logo:
                    $ref: "#/components/schemas/MediaContent"
                picture:
                    $ref: "#/components/schemas/MediaContent"
        BasicTeamInfo:
            type: object
            required:
                - teamId
                - name
            properties:
                teamId:
                    type: string
                    format: uuid
                name:
                    type: string
                logo:
                    $ref: "#/components/schemas/MediaUri"
                sportType:
                    $ref: "#/components/schemas/SportType"
                clubId:
                    type: string
                    format: uuid
        Team:
            type: object
            required:
                - teamId
                - name
                - slogan
                - address
                - sportType
                - captain
                - members
            properties:
                teamId:
                    type: string
                name:
                    type: string
                logo:
                    $ref: "#/components/schemas/MediaUri"
                picture:
                    $ref: "#/components/schemas/MediaUri"
                slogan:
                    type: string
                address:
                    $ref: "#/components/schemas/TeamLocation"
                sportType:
                    $ref: "#/components/schemas/SportType"
                captain:
                    $ref: "#/components/schemas/TeamMember"
                vicecaptain:
                    $ref: "#/components/schemas/TeamMember"
                members:
                    type: array
                    items:
                        $ref: "#/components/schemas/TeamMember"
        TeamMember:
            type: object
            required:
                - userId
                - username
                - fullName
                - picture
                - userType
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                username:
                    type: string
                fullName:
                    type: string
                picture:
                    $ref: "#/components/schemas/MediaUri"
                userType:
                    $ref: "#/components/schemas/UserType"
        TeamMemberInvitation:
            allOf:
                - $ref: "#/components/schemas/TeamMember"
                - type: object
                  required:
                      - invitationType
                  properties:
                      invitationType:
                          $ref: "#/components/schemas/TeamInvitationType"
        TeamSearchItem:
            type: object
            required:
                - teamId
                - logo
                - name
            properties:
                teamId:
                    type: string
                logo:
                    $ref: "#/components/schemas/MediaUri"
                name:
                    type: string
        UpdateTeam:
            type: object
            properties:
                name:
                    type: string
                slogan:
                    type: string
                address:
                    $ref: "#/components/schemas/TeamLocation"
        CreateTeamMembers:
            type: array
            items:
                $ref: "#/components/schemas/UserId"
        TeamMembers:
            type: array
            items:
                $ref: "#/components/schemas/TeamMember"
        CreateClubTeam:
            type: object
            properties:
                captainId:
                    type: string
                membersIds:
                    type: array
                    items:
                        type: string
                name:
                    type: string
                slogan:
                    type: string
                address:
                    $ref: "#/components/schemas/TeamLocation"
                sport:
                    $ref: "#/components/schemas/SportType"
                logo:
                    $ref: "#/components/schemas/MediaContent"
                picture:
                    $ref: "#/components/schemas/MediaContent"
            required:
                - captainId
                - name
                - slogan
                - address
                - sport
        ClubTeam:
            type: object
            properties:
                teamId:
                    type: string
                captain:
                    $ref: "#/components/schemas/TeamMember"
                members:
                    type: array
                    items:
                        $ref: "#/components/schemas/TeamMember"
                name:
                    type: string
                slogan:
                    type: string
                address:
                    $ref: "#/components/schemas/TeamLocation"
                sport:
                    $ref: "#/components/schemas/SportType"
                logo:
                    $ref: "#/components/schemas/MediaUri"
                picture:
                    $ref: "#/components/schemas/MediaUri"
                clubId:
                    type: string
            required:
                - teamId
                - name
                - slogan
                - address
                - sport
                - clubId
                - captain
        # Gamification - Move Goals
        NewSportSession:
            type: object
            required:
                - sportType
                - sessionStart
                - sessionEnd
            properties:
                sportType:
                    $ref: "#/components/schemas/SportType"
                sessionStart:
                    $ref: "#/components/schemas/Timestamp"
                sessionEnd:
                    $ref: "#/components/schemas/Timestamp"
                distance:
                    $ref: "#/components/schemas/PositiveNumber"
                heightDifference:
                    $ref: "#/components/schemas/PositiveNumber"
        NewFitnessSession:
            type: object
            required:
                - sessionStart
                - sessionEnd
                - steps
            properties:
                sessionStart:
                    $ref: "#/components/schemas/Timestamp"
                sessionEnd:
                    $ref: "#/components/schemas/Timestamp"
                steps:
                    $ref: "#/components/schemas/PositiveNumber"
        RewardTrophies:
            type: object
            required:
                - bronze
                - silver
                - gold
                - platinum
            properties:
                bronze:
                    $ref: "#/components/schemas/PositiveInteger"
                silver:
                    $ref: "#/components/schemas/PositiveInteger"
                gold:
                    $ref: "#/components/schemas/PositiveInteger"
                platinum:
                    $ref: "#/components/schemas/PositiveInteger"
        PeriodicReward:
            type: object
            required:
                - trophies
                - points
            properties:
                trophies:
                    $ref: "#/components/schemas/RewardTrophies"
                points:
                    $ref: "#/components/schemas/PositiveInteger"
        PeriodType:
            type: string
            enum:
                - DAY
                - WEEK
                - MONTH
                - TRIMESTER
                - SEMESTER
                - YEAR
        MoveGoalMetric:
            type: string
            enum:
                - DISTANCE
                - DURATION
                - HEIGHT_DIFFERENCE
                - SESSIONS
                - STEPS
                - CHALLENGES_WON
                - BRONZE_TROPHIES_IN_DIFFERENT_SPORTS
                - SILVER_TROPHIES_IN_DIFFERENT_SPORTS
                - GOLD_TROPHIES_IN_DIFFERENT_SPORTS
        RewardedUserMoveGoal:
            allOf:
                - $ref: "#/components/schemas/UserMoveGoal"
                - type: object
                  required:
                      - reward
                  properties:
                      reward:
                          $ref: "#/components/schemas/UserMoveGoalReward"
        UserMoveGoal:
            type: object
            required:
                - userId
                - moveGoalId
                - periodType
                - period
                - season
                - metric
                - value
                - description
                - trophyType
            properties:
                userId:
                    type: string
                moveGoalId:
                    type: string
                periodType:
                    $ref: "#/components/schemas/PeriodType"
                period:
                    type: string
                season:
                    type: string
                sportType:
                    $ref: "#/components/schemas/SportType"
                metric:
                    $ref: "#/components/schemas/MoveGoalMetric"
                value:
                    type: number
                reward:
                    $ref: "#/components/schemas/UserMoveGoalReward"
                description:
                    type: string
                trophyType:
                    $ref: "#/components/schemas/TrophyType"
        UserMoveGoalReward:
            type: object
            required:
                - trophies
                - timestamp
            properties:
                trophies:
                    $ref: "#/components/schemas/RewardTrophies"
                timestamp:
                    $ref: "#/components/schemas/Timestamp"
        TrophyType:
            type: string
            enum:
                - BRONZE
                - SILVER
                - GOLD
                - PLATINUM
        SeasonMoveGoal:
            type: object
            required:
                - moveGoalId
                - periodType
                - metric
                - rewards
                - description
                - trhophyType
            properties:
                moveGoalId:
                    type: string
                periodType:
                    $ref: "#/components/schemas/PeriodType"
                sportType:
                    $ref: "#/components/schemas/SportType"
                metric:
                    $ref: "#/components/schemas/MoveGoalMetric"
                rewards:
                    $ref: "#/components/schemas/PeriodicReward"
                description:
                    type: string
                trhophyType:
                    $ref: "#/components/schemas/TrophyType"
        SeasonRewards:
            type: object
            required:
                - season
                - rewards
            properties:
                season:
                    type: string
                rewards:
                    $ref: "#/components/schemas/PeriodicReward"
                seasonMoveGoals:
                    type: array
                    items:
                        $ref: "#/components/schemas/SeasonMoveGoal"
        # Posts feed
        PaginatedPosts:
            type: object
            required:
                - items
                - total
            properties:
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/PostInUserFeed"
                total:
                    type: integer
                    minimum: 0
        PostInUserFeed:
            allOf:
                - $ref: "#/components/schemas/BasePost"
                - type: object
                  required:
                      - myLike
                  properties:
                      myLike:
                          type: boolean
        BasePost:
            type: object
            required:
                - id
                - author
                - content
                - counts
                - timestamps
            properties:
                id:
                    type: string
                    format: uuid
                author:
                    $ref: "#/components/schemas/PostAuthor"
                content:
                    $ref: "#/components/schemas/PostContent"
                counts:
                    type: object
                    required:
                        - likes
                    properties:
                        likes:
                            type: integer
                            minimum: 0
                timestamps:
                    type: object
                    required:
                        - published
                    properties:
                        published:
                            type: integer
        PostLocation:
            type: object
            required:
                - city
                - region
            properties:
                city:
                    type: string
                region:
                    type: string
        NewPostContent:
            type: object
            required:
                - body
                - title
                - image
                - location
            properties:
                title:
                    type: string
                body:
                    type: string
                image:
                    $ref: "#/components/schemas/MediaContent"
                location:
                    $ref: "#/components/schemas/PostLocation"
        PostContent:
            type: object
            required:
                - body
                - title
                - image
                - location
            properties:
                title:
                    type: string
                body:
                    type: string
                image:
                    $ref: "#/components/schemas/MediaUri"
                location:
                    $ref: "#/components/schemas/PostLocation"
        PostAuthorRole:
            $ref: "#/components/schemas/UserType"
        PostAuthor:
            type: object
            required:
                - authorId
                - authorRole
            properties:
                authorId:
                    type: string
                    format: uuid
                authorFullName:
                    type: string
                authorProfilePicture:
                    $ref: "#/components/schemas/Media"
                authorRole:
                    $ref: "#/components/schemas/PostAuthorRole"
                authorUsername:
                    type: string
                authorName:
                    type: string
                clubNature:
                    $ref: "#/components/schemas/ClubNature"
        NewPost:
            type: object
            required:
                - content
                - authorRole
            properties:
                content:
                    allOf:
                        - $ref: "#/components/schemas/NewPostContent"
                authorRole:
                    $ref: "#/components/schemas/PostAuthorRole"
        FollowingInfo:
            type: object
            required:
                - followingId
                - followingRole
            properties:
                followingId:
                    type: string
                    format: uuid
                followingFullName:
                    type: string
                followingProfilePicture:
                    $ref: "#/components/schemas/Media"
                followingUsername:
                    type: string
                followingName:
                    type: string
                followingRole:
                    $ref: "#/components/schemas/UserType"
                clubNature:
                    $ref: "#/components/schemas/ClubNature"
        FollowerInfo:
            type: object
            required:
                - followerId
                - followerRole
                - isFollowed
            properties:
                followerId:
                    type: string
                    format: uuid
                followerFullName:
                    type: string
                followerProfilePicture:
                    $ref: "#/components/schemas/Media"
                followerUsername:
                    type: string
                isFollowed:
                    type: boolean
                followerName:
                    type: string
                followerRole:
                    $ref: "#/components/schemas/UserType"
                clubNature:
                    $ref: "#/components/schemas/ClubNature"
        FollowerCounts:
            type: object
            properties:
                followers:
                    type: integer
                    minimum: 0
                following:
                    type: integer
                    minimum: 0
        Followings:
            type: object
            required:
                - followings
                - counts
            properties:
                followings:
                    type: array
                    items:
                        $ref: "#/components/schemas/FollowingInfo"
                counts:
                    $ref: "#/components/schemas/FollowerCounts"
        Followers:
            type: object
            required:
                - followers
                - counts
            properties:
                followers:
                    type: array
                    items:
                        $ref: "#/components/schemas/FollowerInfo"
                counts:
                    $ref: "#/components/schemas/FollowerCounts"
        PostSharing:
            type: object
            required:
                - postId
            properties:
                postId:
                    type: string
                    format: uuid

        # Followers
        UpdateFollowRequest:
            type: object
            required:
                - accepted
            properties:
                accepted:
                    type: boolean

        # Payments
        PaymentMethodType:
            type: string
            enum:
                - CARD
                - PAYPAL
        NewPaymentMethod:
            type: object
            required:
                - type
            properties:
                type:
                    $ref: "#/components/schemas/PaymentMethodType"
                card:
                    $ref: "#/components/schemas/NewCardPaymentMethod"
                paypal:
                    $ref: "#/components/schemas/NewPayPalPaymentMethod"
        NewCardPaymentMethod:
            type: object
            required:
                - token
            properties:
                token:
                    type: string
                    description: |
                        The token representing the card generated
                        by Stripe.
        NewPayPalPaymentMethod:
            type: object
            additionalProperties: true
        PaymentMethod:
            type: object
            required:
                - paymentMethodId
                - type
            properties:
                paymentMethodId:
                    type: string
                type:
                    $ref: "#/components/schemas/PaymentMethodType"
                stripePaymentMethod:
                    $ref: "#/components/schemas/StripePaymentMethod"
        StripePaymentMethod:
            type: object
            additionalProperties: true
            description: |
                Stripe payment method object, refer to the
                official documentation: 
                https://stripe.com/docs/api/payment_methods/object
        StripePaymentIntent:
            type: object
            additionalProperties: true
            description: |
                Stripe payment intent object, refer to the
                official documentation: 
                https://stripe.com/docs/api/payment_intents/object
        PaymentsAccount:
            type: object
            properties:
                merchantAccount:
                    $ref: "#/components/schemas/MerchantAccount"
        MerchantAccount:
            type: object
            required:
                - accountId
                - onboardingUrl
                - onboardingComplete
            properties:
                accountId:
                    type: string
                onboardingUrl:
                    type: string
                    format: uri
                onboardingComplete:
                    type: boolean
        TransactionStatus:
            type: string
            enum:
                - PENDING
                - SUCCEEDED
                - FAILED
        Transaction:
            type: object
            required:
                - transactionId
                - description
                - amount
                - status
                - createdAt
            properties:
                transactionId:
                    type: string
                description:
                    type: string
                amount:
                    type: number
                status:
                    $ref: "#/components/schemas/TransactionStatus"
                createdAt:
                    $ref: "#/components/schemas/Timestamp"
        PaginatedTransactions:
            type: object
            required:
                - items
                - total
            properties:
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/Transaction"
                total:
                    type: integer
                    minimum: 0
        StripePayment:
            type: object
            required:
                - stripePaymentIntentId
                - stripePaymentStatus
            properties:
                stripePaymentIntentId:
                    type: string
                stripeClientSecret:
                    type: string
                customerId:
                    type: string
                customerEphemeralKeySecret:
                    type: string
                stripePaymentStatus:
                    type: string
        Payment:
            type: object
            required:
                - transaction
                - stripePayment
            properties:
                transaction:
                    $ref: "#/components/schemas/Transaction"
                stripePayment:
                    $ref: "#/components/schemas/StripePayment"
        NewPayment:
            type: object
            required:
                - paymentMethodId
            properties:
                paymentMethodId:
                    type: string
        PriceAmount:
            $ref: "#/components/schemas/PositiveInteger"
        # Subscription
        RecurringInterval:
            type: string
            enum:
                - DAY
                - WEEK
                - MONTH
                - YEAR
        Recurring:
            type: object
            required:
                - interval
            properties:
                interval:
                    $ref: "#/components/schemas/RecurringInterval"
                intervalCount:
                    type: integer
                    minimum: 1
        RecurringPrice:
            type: object
            required:
                - priceId
                - amount
                - recurring
            properties:
                priceId:
                    type: string
                amount:
                    $ref: "#/components/schemas/PositiveNumber"
                recurring:
                    $ref: "#/components/schemas/Recurring"
        ProductFeature:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
        NewSubscription:
            type: object
            required:
                - productId
                - priceId
                - paymentMethodId
            properties:
                productId:
                    type: string
                priceId:
                    type: string
                paymentMethodId:
                    type: string
        SubscriptionStatus:
            type: string
            enum:
                - ACTIVE
                - WAITING_FOR_PAYMENT
                - CANCELED
                - ERROR
        Subscription:
            type: object
            required:
                - subscriptionId
                - price
                - status
                - started
            properties:
                subscriptionId:
                    type: string
                price:
                    $ref: "#/components/schemas/RecurringPrice"
                status:
                    $ref: "#/components/schemas/SubscriptionStatus"
                started:
                    $ref: "#/components/schemas/Timestamp"
                ends:
                    $ref: "#/components/schemas/Timestamp"
                nextBillingDate:
                    $ref: "#/components/schemas/Timestamp"
        # Account Plans
        AccountPlanType:
            type: string
            enum:
                - FREE
                - PREMIUM
        AccountPlanStatus:
            type: string
            enum:
                - INACTIVE
                - ACTIVE
        AccountPlan:
            type: object
            required:
                - productId
                - type
                - name
                - prices
                - features
                - status
            properties:
                productId:
                    type: string
                type:
                    $ref: "#/components/schemas/AccountPlanType"
                name:
                    type: string
                image:
                    $ref: "#/components/schemas/MediaUri"
                prices:
                    type: array
                    items:
                        $ref: "#/components/schemas/RecurringPrice"
                features:
                    type: array
                    items:
                        $ref: "#/components/schemas/ProductFeature"
                status:
                    $ref: "#/components/schemas/AccountPlanStatus"
                subscription:
                    $ref: "#/components/schemas/Subscription"
        UpdateActiveAccountPlan:
            type: object
            required:
                - type
            properties:
                type:
                    $ref: "#/components/schemas/AccountPlanType"
                subscription:
                    $ref: "#/components/schemas/NewSubscription"
        # Documents Verification
        DocumentType:
            type: string
            enum:
                - MEDICAL_CERTIFICATE
                - EDUCATION
                - LICENSE
        # Challenges
        ChallengeScore:
            type: object
            required:
                - challengerScore
                - challengedScore
            properties:
                challengerScore:
                    type: integer
                    minimum: 0
                challengedScore:
                    type: integer
                    minimum: 0
        ChallengeParticipant:
            type: object
            required:
                - participantId
                - name
            properties:
                participantId:
                    type: string
                    format: uuid
                name:
                    type: string
                picture:
                    $ref: "#/components/schemas/MediaUri"
                clubId:
                    description: Id of the club, if the participant is a club team
                    type: string
                    format: uuid
        ChallengeType:
            type: string
            enum:
                - USERS_CHALLENGE
                - TEAMS_CHALLENGE
                - CLUB_TEAMS_CHALLENGE
        ChallengeStatus:
            type: string
            enum:
                - PENDING
                - REJECTED
                - INVITE_ACCEPTED
                - MODIFIED
                - ACCEPTED
                - COMPLETED
                - ARCHIVED
        NewChallengeParticipant:
            type: object
            required:
                - participantId
            properties:
                participantId:
                    type: string
                    format: uuid
                participantClubId:
                    description: Id of the club, if the participant is a club team
                    type: string
                    format: uuid
        NewChallenge:
            type: object
            required:
                - challengeType
                - challenger
                - challenged
                - sportType
            properties:
                challengeType:
                    $ref: "#/components/schemas/ChallengeType"
                challenger:
                    $ref: "#/components/schemas/NewChallengeParticipant"
                challenged:
                    $ref: "#/components/schemas/NewChallengeParticipant"
                sportType:
                    $ref: "#/components/schemas/SportType"
        Challenge:
            allOf:
                - type: object
                  required:
                      - challengeId
                      - lastModifiedBy
                      - status
                      - challenger
                      - challenged
                      - sportType
                      - challengeType
                  properties:
                      challengeId:
                          type: string
                          format: uuid
                      lastModifiedBy:
                          type: string
                          format: uuid
                      challengeScore:
                          $ref: "#/components/schemas/ChallengeScore"
                      challenger:
                          $ref: "#/components/schemas/ChallengeParticipant"
                      challenged:
                          $ref: "#/components/schemas/ChallengeParticipant"
                      status:
                          $ref: "#/components/schemas/ChallengeStatus"
                      challengeType:
                          $ref: "#/components/schemas/ChallengeType"
                      sportType:
                          $ref: "#/components/schemas/SportType"
                      location:
                          type: string
                      date:
                          type: string
                          format: date-time
        UpdateChallenge:
            type: object
            properties:
                challengeScore:
                    $ref: "#/components/schemas/ChallengeScore"
                status:
                    $ref: "#/components/schemas/ChallengeStatus"
                location:
                    type: string
                date:
                    type: string
                    format: date-time
        # Juniors
        JuniorPlanType:
            type: string
            enum:
                - FREE
                - PAID
        NewJunior:
            type: object
            required:
                - locale
                - givenName
                - familyName
                - username
                - birthdate
            properties:
                email:
                    $ref: "#/components/schemas/Email"
                locale:
                    $ref: "#/components/schemas/Locale"
                givenName:
                    type: string
                familyName:
                    type: string
                username:
                    type: string
                birthdate:
                    $ref: "#/components/schemas/Birthdate"
        ParentOverview:
            type: object
            required:
                - userId
                - givenName
                - familyName
                - updatedAt
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                givenName:
                    type: string
                familyName:
                    type: string
                picture:
                    $ref: "#/components/schemas/Picture"
                updatedAt:
                    $ref: "#/components/schemas/Timestamp"
        JuniorOverview:
            type: object
            required:
                - userId
                - givenName
                - familyName
                - username
                - updatedAt
                - planType
            properties:
                userId:
                    $ref: "#/components/schemas/UserId"
                email:
                    $ref: "#/components/schemas/Email"
                givenName:
                    type: string
                familyName:
                    type: string
                username:
                    type: string
                picture:
                    $ref: "#/components/schemas/Picture"
                updatedAt:
                    $ref: "#/components/schemas/Timestamp"
                planType:
                    $ref: "#/components/schemas/JuniorPlanType"
                subscription:
                    $ref: "#/components/schemas/Subscription"
        JuniorProductType:
            type: string
            enum:
                - JUNIOR_PAID_PROFILE
        JuniorProduct:
            type: object
            required:
                - productId
                - type
                - name
                - prices
                - features
            properties:
                productId:
                    type: string
                type:
                    $ref: "#/components/schemas/JuniorProductType"
                name:
                    type: string
                image:
                    $ref: "#/components/schemas/MediaUri"
                prices:
                    type: array
                    items:
                        $ref: "#/components/schemas/RecurringPrice"
                features:
                    type: array
                    items:
                        $ref: "#/components/schemas/ProductFeature"
        CreateJunior:
            type: object
            required:
                - junior
                - password
                - planType
            properties:
                junior:
                    $ref: "#/components/schemas/NewJunior"
                password:
                    $ref: "#/components/schemas/Password"
                planType:
                    $ref: "#/components/schemas/JuniorPlanType"
                subscription:
                    $ref: "#/components/schemas/NewSubscription"
        UpdateJuniorPlan:
            type: object
            required:
                - planType
            properties:
                planType:
                    $ref: "#/components/schemas/JuniorPlanType"
                subscription:
                    $ref: "#/components/schemas/NewSubscription"
        # Marketplace
        PriceUnitTime:
            type: string
            enum:
                - HOUR
                - DAY
                - WEEK
                - MONTH
                - YEAR
                - SESSION
        DatePeriod:
            type: object
            required:
                - start
                - end
            properties:
                start:
                    type: string
                    format: date
                end:
                    type: string
                    format: date
        MarketplaceServiceTimeSlot:
            type: object
            required:
                - day
                - start
                - end
            properties:
                day:
                    type: string
                    enum:
                        - MONDAY
                        - TUESDAY
                        - WEDNESDAY
                        - THURSDAY
                        - FRIDAY
                        - SATURDAY
                        - SUNDAY
                start:
                    type: string
                    format: time
                end:
                    type: string
                    format: time
        UpdateMarketplaceService:
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                price:
                    $ref: "#/components/schemas/PositiveNumber"
                priceUnitTime:
                    $ref: "#/components/schemas/PriceUnitTime"
                picture:
                    $ref: "#/components/schemas/NewMedia"
                timeSlots:
                    type: array
                    items:
                        $ref: "#/components/schemas/MarketplaceServiceTimeSlot"
                period:
                    $ref: "#/components/schemas/DatePeriod"
                sportType:
                    $ref: "#/components/schemas/SportType"
        NewMarketplaceService:
            type: object
            required:
                - name
                - description
                - price
                - timeSlots
                - period
                - sportType
            properties:
                name:
                    type: string
                description:
                    type: string
                price:
                    $ref: "#/components/schemas/PositiveNumber"
                priceUnitTime:
                    $ref: "#/components/schemas/PriceUnitTime"
                picture:
                    $ref: "#/components/schemas/NewMedia"
                timeSlots:
                    type: array
                    items:
                        $ref: "#/components/schemas/MarketplaceServiceTimeSlot"
                period:
                    $ref: "#/components/schemas/DatePeriod"
                sportType:
                    $ref: "#/components/schemas/SportType"
        MarketplaceService:
            type: object
            required:
                - serviceId
                - name
                - description
                - price
                - timeSlots
                - serviceProvider
                - period
                - sportType
            properties:
                serviceId:
                    type: string
                    format: uuid
                name:
                    type: string
                description:
                    type: string
                price:
                    $ref: "#/components/schemas/PositiveNumber"
                priceUnitTime:
                    $ref: "#/components/schemas/PriceUnitTime"
                picture:
                    $ref: "#/components/schemas/MediaUri"
                timeSlots:
                    type: array
                    items:
                        $ref: "#/components/schemas/MarketplaceServiceTimeSlot"
                serviceProvider:
                    $ref: "#/components/schemas/BasicUserData"
                period:
                    $ref: "#/components/schemas/DatePeriod"
                sportType:
                    $ref: "#/components/schemas/SportType"
        PaginatedMarketplaceServiceProviders:
            type: object
            required:
                - items
                - total
            properties:
                items:
                    type: array
                    items:
                        $ref: "#/components/schemas/MarketplaceServiceProvider"
                total:
                    $ref: "#/components/schemas/PositiveInteger"
        MarketplaceServiceProvider:
            type: object
            required:
                - userId
                - username
                - name
                - userType
                - lowestServicePrice
            properties:
                userId:
                    type: string
                    format: uuid
                username:
                    type: string
                name:
                    type: string
                picture:
                    $ref: "#/components/schemas/MediaUri"
                logo:
                    $ref: "#/components/schemas/MediaUri"
                userType:
                    $ref: "#/components/schemas/UserType"
                sportTypes:
                    type: array
                    items:
                        $ref: "#/components/schemas/SportType"
                taughtSportTypes:
                    type: array
                    items:
                        $ref: "#/components/schemas/SportType"
                address:
                    $ref: "#/components/schemas/Address"
                lowestServicePrice:
                    $ref: "#/components/schemas/PriceAmount"
        # Marketplace - Bookings
        NewMarketplaceServiceBooking:
            type: object
            required:
                - serviceId
                - bookedFor
            properties:
                serviceId:
                    type: string
                bookedFor:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserId"
                participants:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserId"
        MarketplaceServiceBookingStatus:
            type: string
            enum:
                - CONFIRMED
                - REQUESTED
                - PENDING
                - CANCELED
                - PASSED
        MarketplaceServiceOverview:
            type: object
            required:
                - serviceId
                - name
                - description
                - price
            properties:
                serviceId:
                    type: string
                    format: uuid
                name:
                    type: string
                description:
                    type: string
                picture:
                    $ref: "#/components/schemas/MediaUri"
                price:
                    $ref: "#/components/schemas/PositiveNumber"
                priceUnitTime:
                    $ref: "#/components/schemas/PriceUnitTime"
        MarketplaceServiceBooking:
            type: object
            required:
                - bookingId
                - service
                - serviceProvider
                - bookedFor
                - bookedBy
                - status
                - createdAt
            properties:
                bookingId:
                    type: string
                    format: uuid
                service:
                    $ref: "#/components/schemas/MarketplaceServiceOverview"
                serviceProvider:
                    $ref: "#/components/schemas/BasicUserData"
                bookedFor:
                    type: array
                    items:
                        $ref: "#/components/schemas/BasicUserData"
                participants:
                    type: array
                    items:
                        $ref: "#/components/schemas/BasicUserData"
                bookedBy:
                    $ref: "#/components/schemas/BasicUserData"
                status:
                    $ref: "#/components/schemas/MarketplaceServiceBookingStatus"
                createdAt:
                    $ref: "#/components/schemas/Timestamp"
                details:
                    $ref: "#/components/schemas/MarketplaceServiceBookingDetails"
                payment:
                    $ref: "#/components/schemas/BookingPayment"
        MarketplaceServiceBookingDetails:
            type: object
            required:
                - meetingPoint
                - price
                - startsAt
                - endsAt
            properties:
                notes:
                    type: string
                meetingPoint:
                    $ref: "#/components/schemas/Address"
                price:
                    $ref: "#/components/schemas/PositiveNumber"
                startsAt:
                    $ref: "#/components/schemas/Timestamp"
                endsAt:
                    $ref: "#/components/schemas/Timestamp"
        NewParticipation:
            type: object
            required:
                - participantId
            properties:
                participantId:
                    type: string
                    format: uuid
        UpdateParticipation:
            type: object
            required:
                - confirmed
            properties:
                confirmed:
                    type: boolean
        NewBookingPayment:
            type: object
            required:
                - payment
            properties:
                payment:
                    $ref: "#/components/schemas/NewPayment"
                fitcoinPercentage:
                    $ref: "#/components/schemas/Percentage"
        BookingPayment:
            type: object
            properties:
                payment:
                    $ref: "#/components/schemas/Payment"
                fitcoinPayment:
                    $ref: "#/components/schemas/FitCoinPayment"
        # Reviews
        ReviewParameterType:
            type: string
            enum:
                - TECHNICAL_DEMONSTRATION
                - EXPLANATION
                - EFFICIENCY
                - EMPATHY
                - FUN
                - CUSTOMER_SERVICE
                - TIDINESS_AND_CLEANLINESS
        ReviewParameterValue:
            type: integer
            minimum: 0
            maximum: 10
        ReviewParameter:
            type: object
            required:
                - type
                - value
            properties:
                type:
                    $ref: "#/components/schemas/ReviewParameterType"
                value:
                    $ref: "#/components/schemas/ReviewParameterValue"
        Review:
            type: object
            required:
                - reviewId
                - userId
                - createdAt
                - parameters
            properties:
                reviewId:
                    type: string
                    format: uuid
                userId:
                    type: string
                    format: uuid
                createdAt:
                    $ref: "#/components/schemas/Timestamp"
                parameters:
                    type: array
                    items:
                        $ref: "#/components/schemas/ReviewParameter"
        NewReview:
            type: object
            required:
                - parameters
            properties:
                parameters:
                    type: array
                    items:
                        $ref: "#/components/schemas/ReviewParameter"
        ReviewParameterSummary:
            type: object
            required:
                - type
                - average
            properties:
                type:
                    $ref: "#/components/schemas/ReviewParameterType"
                average:
                    $ref: "#/components/schemas/ReviewParameterValue"
        UserReviewsSummary:
            type: object
            required:
                - average
                - reviewsCount
                - parameters
            properties:
                average:
                    $ref: "#/components/schemas/ReviewParameterValue"
                reviewsCount:
                    $ref: "#/components/schemas/PositiveInteger"
                parameters:
                    type: array
                    items:
                        $ref: "#/components/schemas/ReviewParameterSummary"
                staffAverage:
                    $ref: "#/components/schemas/ReviewParameterValue"
        # FitCoin
        FitCointTransactionType:
            type: string
            enum:
                - EARN
                - SPEND
        FitCoinTransaction:
            type: object
            required:
                - transactionId
                - type
                - amount
                - createdAt
            properties:
                transactionId:
                    type: string
                    format: uuid
                type:
                    $ref: "#/components/schemas/FitCointTransactionType"
                amount:
                    $ref: "#/components/schemas/PositiveInteger"
                createdAt:
                    $ref: "#/components/schemas/Timestamp"
        FitCoinExpiringBalance:
            type: object
            required:
                - amount
                - expiresAt
            properties:
                amount:
                    $ref: "#/components/schemas/PositiveInteger"
                expiresAt:
                    $ref: "#/components/schemas/Timestamp"
        FitCoinsSummary:
            type: object
            required:
                - balance
                - transactions
                - unexpiringBalance
                - expiringBalances
            properties:
                balance:
                    $ref: "#/components/schemas/PositiveInteger"
                transactions:
                    type: array
                    items:
                        $ref: "#/components/schemas/FitCoinTransaction"
                unexpiringBalance:
                    $ref: "#/components/schemas/PositiveInteger"
                expiringBalances:
                    type: array
                    items:
                        $ref: "#/components/schemas/FitCoinExpiringBalance"
                settings:
                    $ref: "#/components/schemas/FitCoinsSettings"
        FitCoinPayment:
            type: object
            required:
                - transaction
            properties:
                transaction:
                    $ref: "#/components/schemas/FitCoinTransaction"
        UpdateFitCoinsSettings:
            type: object
            properties:
                servicePercentage:
                    $ref: "#/components/schemas/Percentage"
        FitCoinsSettings:
            type: object
            properties:
                servicePercentage:
                    $ref: "#/components/schemas/Percentage"
servers:
    - description: Development Server
      url: https://o60fgkagq6.execute-api.eu-west-1.amazonaws.com/Api
